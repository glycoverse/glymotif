[{"path":[]},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glymotif","title":"Contributing to glymotif","text":"outlines propose change glymotif. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glymotif","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glymotif","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glymotif","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glymotif\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glymotif","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glymotif","text":"Please note glymotif project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glymotif/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 glymotif authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glymotif","title":"Getting help with glymotif","text":"Thanks using glymotif! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glymotif","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glymotif","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glymotif","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"what-is-a-glycan-motif","dir":"Articles","previous_headings":"","what":"What is a Glycan Motif? 🧬","title":"Getting Started with glymotif","text":"Imagine ’re looking complex glycan structure—intricate branched molecules decorate cells. Hidden within molecular architectures recurring patterns called “motifs.” Think molecular equivalent architectural motifs: recognizable design elements appear across different buildings (case, different glycans). glycan motif simply substructure appears multiple glycans. (Don’t confuse protein motifs—’re talking carbohydrates ! 🍭) famous examples include N-glycan core, Lewis X antigen, Tn antigen.","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"why-should-you-care","dir":"Articles","previous_headings":"","what":"Why Should You Care? 🤔","title":"Getting Started with glymotif","text":"’s gets exciting: motifs aren’t just decorative—’re functional. determine cells interact, pathogens bind, immune system recognizes friend foe. package, glymotif, computational microscope 🔬 advanced glycan motif analysis. helps answer two fundamental questions: glycan contain specific motif? many times motif appear? best part? ✨ Everything works vectors glycans, can analyze hundreds thousands . Important note: package builds powerful glyrepr package. haven’t used , highly recommend checking introduction first.","code":"library(glymotif)"},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"a-quick-challenge","dir":"Articles","previous_headings":"","what":"A Quick Challenge 🧩","title":"Getting Started with glymotif","text":"Let’s start visual puzzle. Can tell glycan left contains motif right?  said “yes,” congratulations—keen eye! 👀 gave 500 glycans 20 motifs check? ’s glymotif becomes indispensable. Let’s see action using IUPAC-condensed notation (standard text format glycans glycoverse ecosystem). notation looks unfamiliar, don’t worry—check helpful guide first. Pretty neat, right? 😎","code":"glycans <- c(   \"Neu5Ac(a2-3)Gal(b1-3)[Fuc(a1-3)]GlcNAc(b1-3)Gal(b1-3)GalNAc\",   \"Neu5Ac(a2-?)Gal(b1-3)[Fuc(a1-3)]GlcNAc\",   \"Man(b1-4)GlcNAc(b1-4)[Fuc(a1-6)]GlcNAc\",   \"Gal(b1-3)GalNAc\",   \"Neu5Ac9Ac(a2-3)Gal(b1-4)GlcNAc\" ) motif <- \"Neu5Ac(a2-3)Gal(b1-3)[Fuc(a1-3)]GlcNAc\" have_motif(glycans, motif) #> [1]  TRUE FALSE FALSE FALSE FALSE"},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"your-toolkit-four-essential-functions","dir":"Articles","previous_headings":"","what":"Your Toolkit: Four Essential Functions 🛠️","title":"Getting Started with glymotif","text":"glymotif provides four core functions work together like well-designed instrument panel: have_motif(): Returns TRUE/FALSE glycan—contain motif? count_motif(): Returns numbers—many times motif appear? have_motifs(): plural version—checks multiple motifs , returns matrix count_motifs(): Counts multiple motifs simultaneously, returns matrix","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"why-the-plural-functions","dir":"Articles","previous_headings":"Your Toolkit: Four Essential Functions 🛠️","what":"Why the Plural Functions? 🤷‍♀️","title":"Getting Started with glymotif","text":"might wonder: “just use have_motif() loop?” Great question! 💭 two compelling reasons: 1. Predictable output format 📊 Just like purrr package different map functions different return types, functions guarantee consistent outputs. singular functions return vectors; plural functions return matrices. surprises, wrestling data types. 2. Optimized performance ⚡ plural functions specifically optimized multiple motifs. ’re significantly faster looping using purrr::map() avoid redundant computations.","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"seeing-them-in-action","dir":"Articles","previous_headings":"Your Toolkit: Four Essential Functions 🛠️","what":"Seeing Them in Action","title":"Getting Started with glymotif","text":"Let’s define motifs work : functions follow pattern: First argument: glycans (IUPAC strings glyrepr::glycan_structure() object) Second argument: motif(s) (IUPAC strings, glyrepr::glycan_structure() object, predefined motif names) Pro tip: 💡 don’t need memorize complex IUPAC strings! Use predefined motif names instead:","code":"motifs <- c(   \"Neu5Ac(a2-3)Gal(b1-3)[Fuc(a1-3)]GlcNAc\",   \"Fuc(a1-\",   \"Gal(b1-3)GalNAc\" ) have_motif(glycans, motif) #> [1]  TRUE FALSE FALSE FALSE FALSE unname(have_motifs(glycans, motifs))  # Removing names for cleaner display #>       [,1]  [,2]  [,3] #> [1,]  TRUE  TRUE  TRUE #> [2,] FALSE  TRUE FALSE #> [3,] FALSE  TRUE FALSE #> [4,] FALSE FALSE  TRUE #> [5,] FALSE FALSE FALSE available_motifs()[1:10] #>  [1] \"Blood group H (type 2) - Lewis y\" \"i antigen\"                        #>  [3] \"LacdiNAc\"                         \"GT2\"                              #>  [5] \"Blood group B (type 1) - Lewis b\" \"LcGg4\"                            #>  [7] \"Sialosyl paragloboside\"           \"Sialyl Lewis x\"                   #>  [9] \"A antigen (type 3)\"               \"Type 1 LN2\" have_motif(glycans, \"Type 2 LN2\") #> [1] FALSE FALSE FALSE FALSE FALSE"},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"the-art-and-science-of-motif-matching","dir":"Articles","previous_headings":"","what":"The Art and Science of Motif Matching 🎨🔬","title":"Getting Started with glymotif","text":"Now enter fascinating complexity motif recognition. might think: “’s just pattern matching, right?” Well, quite. 🤨 Real-world glycan data beautifully messy: Missing linkage information: Sometimes know “’s link” exact type Generic monosaccharides: Mass spectrometry might tell us “Hex” instead “Glucose” Chemical modifications: Sulfation, acetylation, decorations add complexity Alignment constraints: motifs “count” appear specific locations Consider Tn antigen—’s just single GalNAc residue. shouldn’t match every GalNAc complex N-glycan, ? Context matters. Similarly, O-glycan core motif recognized reducing end, buried middle structure. glymotif handles complexities sophisticated matching engine. algorithm considers structural context, chemical modifications, biological relevance make intelligent matching decisions.","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s next?","title":"Getting Started with glymotif","text":"Want known details motif matching rules? Working glyexp::experiment()? Dealing N-glycans? ","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/glymotif.html","id":"standing-on-the-shoulders-of-giants","dir":"Articles","previous_headings":"","what":"Standing on the Shoulders of Giants 🏔️","title":"Getting Started with glymotif","text":"work wouldn’t possible without inspiration groundwork laid several excellent projects: glycowork: comprehensive Python toolkit glycan analysis 🐍 GlyCompare: Advanced glycan comparison algorithms 🔬 ’re proud contribute growing ecosystem computational glycobiology tools! 🌱","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"welcome-to-the-heart-of-glymotif","dir":"Articles","previous_headings":"","what":"Welcome to the Heart of glymotif 🔬","title":"The Science Behind Motif Matching","text":"Ever wondered ’s happening hood call have_motif() count_motif()? ’re embark fascinating journey intricate world glycan pattern recognition! 🚀 vignette, ’ll demystify sophisticated algorithms power glymotif functions. rules rooted comprehensive GlycoMotif database, ’ve tailored specifically practical glycan analysis workflows. quick note: 📝 use IUPAC-condensed glycan text representations throughout. format looks like hieroglyphics , take detour excellent primer first. Trust us—’s worth !","code":"library(glymotif)"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"the-biological-reality-defining-our-terms","dir":"Articles","previous_headings":"","what":"The Biological Reality: Defining Our Terms 🧬","title":"The Science Behind Motif Matching","text":"diving technical details, let’s establish clarity ’re actually matching. Throughout vignette, “glycan” refers complete carbohydrate structure—whole molecular tree, reducing end (often attached proteins lipids) non-reducing termini. “Motif”, hand, structurally meaningful pattern within tree. : single monosaccharide 🍯 small oligosaccharide unit 🔗 entire glycan structure 🌳 central question beautifully simple: given glycan contain particular motif? Let’s start visual example illustrates concept:  Looking diagram, can confidently say “glycan contains motif exactly 1 occurrence.” presence part determined have_motif(), counting aspect handled count_motif().","code":"glycan <- \"Neu5Ac(a2-3)Gal(b1-3)[Fuc(a1-3)]GlcNAc(b1-3)Gal(b1-3)GalNAc\" motif <- \"Neu5Ac(a2-3)Gal(b1-3)[Fuc(a1-3)]GlcNAc\"  print(paste0(\"Does the glycan have the motif? \", have_motif(glycan, motif))) #> [1] \"Does the glycan have the motif? TRUE\" print(paste0(\"How many occurrences of the motif are there in the glycan? \", count_motif(glycan, motif))) #> [1] \"How many occurrences of the motif are there in the glycan? 1\""},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"why-not-just-use-str_detect","dir":"Articles","previous_headings":"","what":"Why Not Just Use str_detect()? 🤔","title":"The Science Behind Motif Matching","text":"might thinking: “example looks straightforward—just use string matching?” Great question! 💭 Let’s test hypothesis: Indeed, works simple case. ’s plot thickens… 🎭 Real-world glycan analysis gloriously complex. Consider challenging scenarios: Complex branching patterns multiple attachment points 🌿 Ambiguous linkage annotations details missing uncertain ❓ Generic monosaccharide assignments mass spectrometry data 🔍 Chemical modifications substituents add layers complexity ⚗️ Positional constraints context determines biological meaning 📍 Reducing end anomers affect molecular recognition 🔄 Writing regular expressions handle nuances? ’s one-way ticket debugging hell! 😱 ’s precisely need sophisticated computational tools task.","code":"stringr::str_detect(glycan, stringr::fixed(motif)) #> [1] TRUE"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"demystifying-the-complexity-one-rule-at-a-time","dir":"Articles","previous_headings":"","what":"Demystifying the Complexity: One Rule at a Time 🧩","title":"The Science Behind Motif Matching","text":"have_motifs() count_motifs() functions return matrices meaningful row column names. clarity demonstrations, let’s create simplified wrapper functions: Now, let’s explore matching rule systematically.","code":"# You don't have to understand this. have_motifs_simple <- function(glycan, motifs, ...) {   unname(have_motifs(glycan, motifs, ...)[1, ]) }  count_motifs_simple <- function(glycan, motifs, ...) {   unname(count_motifs(glycan, motifs, ...)[1, ]) }"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"rule-1-branching-logic","dir":"Articles","previous_headings":"Demystifying the Complexity: One Rule at a Time 🧩","what":"Rule 1: Branching Logic 🌳","title":"The Science Behind Motif Matching","text":"Branching patterns actually quite intuitive think glycans tree structures. Let’s examine concrete example:  Let’s check three distinct motifs, representing different level structural complexity: “Gal(??-” - single monosaccharide building block “Fuc(??-?)GlcNAc(??-” - disaccharide ambiguous linkage complete glycan structure computational perspective: 🖥️ Behind scenes, ’re performing subgraph isomorphism matching. Glycans motifs represented mathematical graphs, ’re searching structural embeddings. two crucial distinctions standard graph theory: First, directionality matters. ⬅️➡️ reducing end (right side) non-reducing end (left side) biologically distinct. Direction affects function: Second, biological equivalence trumps mathematical multiplicity. 🔄 multiple mathematically distinct matches identical biological meaning, count one. Consider elegant example:  Technically, motif two valid subgraph matches within glycan (“-, B-b, C-c” “-b, B-, C-c”). biological perspective, matches equivalent—specific assignment mannose residues doesn’t matter. Therefore, count_motif() reports exactly one match:","code":"glycan <- \"Neu5Ac(??-?)Gal(??-?)[Fuc(??-?)]GlcNAc(??-?)Gal(??-?)GalNAc\" motifs <- c(   \"Gal(??-\",   \"Fuc(??-?)GlcNAc(??-\",   glycan ) count_motifs_simple(glycan, motifs) #> [1] 2 1 1 motifs <- c(\"Fuc(??-?)GlcNAc(??-\", \"GlcNAc(??-?)Fuc(??-\") have_motifs_simple(glycan, motifs) #> [1]  TRUE FALSE glycan <- \"Man(??-?)[Man(??-?)]Man(??-?)GlcNAc(??-?)GlcNAc(??-\" motif <- \"Man(??-?)[Man(??-?)]Man(??-\" count_motif(glycan, motif) #> [1] 1"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"rule-2-linkage-flexibility","dir":"Articles","previous_headings":"Demystifying the Complexity: One Rule at a Time 🧩","what":"Rule 2: Linkage Flexibility 🔗","title":"The Science Behind Motif Matching","text":"Linkage information glycomics can frustratingly incomplete. might encounter patterns like “??-6”, “a2-?”, complete unknowns. matching philosophy elegantly simple: glycan ambiguous motif. means concrete linkage like “a2-6” glycan data match: “a2-6” (exact match) ✅ “a2-?” (position-specific, anomer flexible) ✅ “??-6” (anomer-specific, position flexible) ✅ “??-?” (completely flexible wildcard) ✅ ambiguous linkage like “a2-?” match equally flexible patterns motif. Let’s see practice:  Pro tip notation: 💡 Following SNFG conventions, often abbreviate linkages omitting anomeric carbon number. “a1-6” becomes simply “a6” since anomeric position typically known.","code":"glycan <- \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)[Fuc(a1-6)]GlcNAc\" motifs <- c(   \"Fuc(a1-?)GlcNAc\",  # Motif 1: anomer known, position flexible   \"Fuc(a1-6)GlcNAc\",  # Motif 2: exact linkage match   \"Fuc(a1-3)GlcNAc\"   # Motif 3: wrong position specification ) have_motifs_simple(glycan, motifs) #> [1]  TRUE  TRUE FALSE"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"rule-3-monosaccharide-resolution","dir":"Articles","previous_headings":"Demystifying the Complexity: One Rule at a Time 🧩","what":"Rule 3: Monosaccharide Resolution 🔬","title":"The Science Behind Motif Matching","text":"Mass spectrometry often provides incomplete monosaccharide identification. might know ’s hexose present whether ’s glucose, galactose, mannose. distinguish two resolution levels: Concrete monosaccharides: Structurally specific (e.g., “Gal”, “Man”, “Glc”) Generic monosaccharides: Compositionally defined (e.g., “Hex”, “HexNAc”, “dHex”) matching rule mirrors linkage philosophy: glycan ambiguous motif. Specifically: Concrete monosaccharides glycans can match concrete generic motifs ✅ Generic monosaccharides glycans can match generic motifs ✅","code":"mat <- have_motifs(glycans = c(\"Hex\", \"Man\"), motifs = c(\"Hex\", \"Man\")) rownames(mat) <- paste0(rownames(mat), \"_glycan\") colnames(mat) <- paste0(colnames(mat), \"_motif\") mat #>            Hex_motif Man_motif #> Hex_glycan      TRUE     FALSE #> Man_glycan      TRUE      TRUE"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"rule-4-chemical-modifications","dir":"Articles","previous_headings":"Demystifying the Complexity: One Rule at a Time 🧩","what":"Rule 4: Chemical Modifications 🧪","title":"The Science Behind Motif Matching","text":"Real glycans often decorated chemical modifications—acetylation, sulfation, methylation, . substituents two components: position (’re attached) identity (). example, “Neu5Ac9Ac” represents N-acetylneuraminic acid additional 9-O-acetyl group. matching rules straightforward powerful: Identity matching: glycan substituent, motif must type match Position flexibility: glycan ambiguous motif regarding position  Let’s see action:","code":"glycans <- c(\"Neu5Ac9Ac\", \"Neu5Ac?Ac\", \"Neu5Ac\") motifs <- c(\"Neu5Ac9Ac\", \"Neu5Ac?Ac\", \"Neu5Ac\") mat <- have_motifs(glycans, motifs) rownames(mat) <- paste0(\"glycan_\", 1:3) colnames(mat) <- paste0(\"motif_\", 1:3) mat #>          motif_1 motif_2 motif_3 #> glycan_1    TRUE    TRUE   FALSE #> glycan_2   FALSE    TRUE   FALSE #> glycan_3   FALSE   FALSE    TRUE"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"rule-5-alignment-constraints","dir":"Articles","previous_headings":"Demystifying the Complexity: One Rule at a Time 🧩","what":"Rule 5: Alignment Constraints 📍","title":"The Science Behind Motif Matching","text":"’s biology meets computation fascinating ways! 🎯 motifs meaningful specific structural contexts. Consider N-glycan core—’s biologically significant positioned reducing end. Similarly, Tn antigen (simply GalNAc) represent entire O-glycan structure, just GalNAc residue buried within larger molecule. Following GlycoMotif standards, recognize four alignment types: “substructure”: motif can appear anywhere within glycan 🔍 “core”: Must align connected subtree reducing end 🌱 “terminal”: Must align connected subtree non-reducing ends 🍃 “whole”: Must match entire glycan structure 🌳  Let’s verify behaviors computationally:","code":"glycan <- \"Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal\" motifs <- c(   \"Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal\",  # motif 1: complete structure   \"Gal(a1-3)Gal(a1-4)Gal\",           # motif 2: terminal branch            \"Gal(a1-4)Gal(a1-6)Gal\",  # motif 3: reducing-end subtree            \"Gal(a1-4)Gal\"            # motif 4: internal fragment ) alignments <- c(\"substructure\", \"whole\", \"core\", \"terminal\") mat <- do.call(cbind, purrr::map(alignments, ~ have_motifs_simple(glycan, motifs, alignment = .x))) colnames(mat) <- alignments rownames(mat) <- paste0(\"motif_\", 1:4) mat #>         substructure whole  core terminal #> motif_1         TRUE  TRUE  TRUE     TRUE #> motif_2         TRUE FALSE FALSE     TRUE #> motif_3         TRUE FALSE  TRUE    FALSE #> motif_4         TRUE FALSE FALSE    FALSE"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"rule-6-reducing-end-anomers","dir":"Articles","previous_headings":"Demystifying the Complexity: One Rule at a Time 🧩","what":"Rule 6: Reducing End Anomers 🔄","title":"The Science Behind Motif Matching","text":"reducing end glycan—special monosaccharide connected proteins lipids—deserves special attention. anomeric configuration can significantly impact biological function. matching behavior depends motif alignment: motif aligns away reducing end: motif’s “reducing end” (really just rightmost residue) matched corresponding internal linkage. motif aligns reducing end: Direct comparison glycan’s actual reducing end anomer.","code":"glycan <- \"Gal(a1-3)GalNAc(b1-\" motifs <- c(\"Gal(a1-\", \"Gal(b1-\") have_motifs_simple(glycan, motifs) #> [1]  TRUE FALSE glycan <- \"Gal(a1-3)GalNAc(b1-\" motifs <- c(\"GalNAc(a1-\", \"GalNAc(b1-\") have_motifs_simple(glycan, motifs) #> [1] FALSE  TRUE"},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"the-big-picture-why-this-complexity-matters","dir":"Articles","previous_headings":"","what":"The Big Picture: Why This Complexity Matters 🌟","title":"The Science Behind Motif Matching","text":"might wondering: “intricate rules?” answer lies beautiful complexity biological systems. 🧬 Unlike artificial pattern matching, biological recognition systems : Context-sensitive: motif can different meanings different locations Fault-tolerant: Partial information still yield meaningful results Hierarchically organized: Generic patterns can refined specific ones Chemically aware: Modifications substitutions integral function encoding biological principles matching algorithms, glymotif bridges gap computational analysis biological reality. Whether ’re analyzing clinical glycomics data, exploring evolutionary relationships, designing glycan-based therapeutics, sophisticated matching rules ensure results computationally sound biologically meaningful.","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/motif-matching.html","id":"ready-for-more","dir":"Articles","previous_headings":"","what":"Ready for More? 🚀","title":"The Science Behind Motif Matching","text":"deep dive motif matching rules provides foundation understanding glymotif works. Armed knowledge, ’re ready tackle even complex glycan analysis challenges! practical applications real-world examples, head back Getting Started guide. detailed function documentation, explore reference manual. Happy glycan hunting! 🔍✨","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/n-glycans.html","id":"why-n-glycans-deserve-special-attention","dir":"Articles","previous_headings":"","what":"Why N-Glycans Deserve Special Attention","title":"N-Glycans","text":"N-glycans remarkable structural predictability. Unlike wild cousins (O-glycans others), N-glycans follow strict biosynthetic rules. constraint creates opportunities: can describe N-glycan architecture using standardized vocabulary glycobiologists developed decades. Think like describing houses planned community—house unique, follow architectural principles. can meaningfully ask: “many bedrooms?” “garage?” “style roof?” N-glycans, equivalent questions : type ? (high mannose, hybrid, complex, paucimannose) many antenna branches? bisecting GlcNAc? many core fucoses? many arm fucoses? many terminal galactoses?","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/n-glycans.html","id":"your-n-glycan-analysis-toolkit","dir":"Articles","previous_headings":"","what":"Your N-Glycan Analysis Toolkit","title":"N-Glycans","text":"glymotif provides comprehensive suite functions N-glycan characterization: Classification Structure: is_n_glycan(): Confirms whether structure actually N-glycan n_glycan_type(): Classifies high mannose, hybrid, complex, paucimannose Branching Architecture: n_antennae(): Counts number antenna branches has_bisecting(): Detects bisecting GlcNAc presence Fucosylation Patterns: n_core_fuc(): Counts core fucoses (attached reducing-end GlcNAc) n_arm_fuc(): Counts arm fucoses (attached antenna GlcNAcs) Terminal Features: n_gal(): Counts total galactose residues n_terminal_gal(): Counts terminal galactoses (without sialic acid caps)","code":""},{"path":"https://glycoverse.github.io/glymotif/articles/n-glycans.html","id":"the-swiss-army-knife-describe_n_glycans","dir":"Articles","previous_headings":"","what":"The Swiss Army Knife: describe_n_glycans() 🔧","title":"N-Glycans","text":"Rather calling function individually, can use describe_n_glycans() get complete structural profile one go. ’s like comprehensive building inspection checks everything :","code":"n_glycans <- c(   \"Man(a1-3)[Man(a1-3)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc\",   \"GlcNAc(b1-2)Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)[Fuc(a1-6)]GlcNAc\",   \"Gal(b1-4)GlcNAc(b1-2)Man(a1-3)[Gal(b1-4)GlcNAc(b1-2)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc\" ) describe_n_glycans(n_glycans) #> # A tibble: 3 × 7 #>   glycan_type  bisecting n_antennae n_core_fuc n_arm_fuc n_gal n_terminal_gal #>   <chr>        <lgl>          <int>      <int>     <int> <int>          <int> #> 1 paucimannose FALSE             NA          0         0     0              0 #> 2 complex      FALSE              1          1         0     0              0 #> 3 complex      FALSE              2          0         0     2              2"},{"path":"https://glycoverse.github.io/glymotif/articles/n-glycans.html","id":"embracing-the-messy-reality-working-with-ambiguous-data","dir":"Articles","previous_headings":"","what":"Embracing the Messy Reality: Working with Ambiguous Data 🌪️","title":"N-Glycans","text":"’s glymotif truly shines—thrives incomplete information! ✨ real world glycomics glycoproteomics research, rarely get perfect structural data. Mass spectrometry might tell “’s hexose ” without specifying whether ’s glucose, galactose, mannose. Linkage information might completely missing uncertain. beauty N-glycan analysis? 💎 strict biosynthetic rules act Rosetta Stone, allowing us decode meaning ambiguous data. functions designed work minimal information requirements: Generic monosaccharides: “Hex”, “HexNAc”, “dHex”, instead specific sugars Missing linkages: mysterious “??” annotations won’t stop analysis Uncertain positions: algorithm makes intelligent assumptions based N-glycan biology Let’s see action intentionally ambiguous structures: Remarkable, isn’t ? 🤯 Despite uncertainty input data, get structural insights . tolerance ambiguity game-changer high-throughput glycomics glycoproteomics. 🚀 Whether ’re analyzing thousands glycopeptides proteomics experiment working automated glycan assignment mass spectra, glymotif meets data —wish .","code":"# These are the same N-glycans as before, but with all specificity stripped away ambiguous_glycans <- c(   \"Hex(??-?)[Hex(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc\",   \"HexNAc(??-?)Hex(??-?)[Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc\",   \"Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc\" ) describe_n_glycans(ambiguous_glycans) #> # A tibble: 3 × 7 #>   glycan_type  bisecting n_antennae n_core_fuc n_arm_fuc n_gal n_terminal_gal #>   <chr>        <lgl>          <int>      <int>     <int> <int>          <int> #> 1 paucimannose FALSE             NA          0         0     0              0 #> 2 complex      FALSE              1          1         0     0              0 #> 3 complex      FALSE              2          0         0     2              2"},{"path":"https://glycoverse.github.io/glymotif/articles/n-glycans.html","id":"describing-n-glycans-in-an-experiment","dir":"Articles","previous_headings":"","what":"Describing N-Glycans in an Experiment","title":"N-Glycans","text":"’s seamless integration waiting : add_glycan_description() function can automatically apply N-glycan analysis just discussed entire dataset. manual loops, data wrangling headaches—just one function call enrich glycan annotations comprehensive structural descriptions. ’s works practice:","code":"# Add N-glycan structural descriptions automatically exp <- add_glycan_description(exp)  # Now your experiment object contains rich glycan annotations! get_var_info(exp)"},{"path":"https://glycoverse.github.io/glymotif/articles/with-exp.html","id":"when-motifs-meet-experiments-a-perfect-partnership","dir":"Articles","previous_headings":"","what":"When Motifs Meet Experiments: A Perfect Partnership 🤝","title":"Working with glyexp","text":"real power glymotif shines brightest joins forces tools glycoverse ecosystem. ’re already using glyread import glycoproteomics results glyexp manage experimental data, ’re treat! glymotif provides incredibly useful functions perform experiment manipulation motifs—think adding new lens analytical microscope. 🔬 Important note: vignette assumes ’re familiar glyexp package. haven’t met yet, highly recommend checking introduction first. Trust us—’s worth detour! 🚀","code":"library(glymotif) library(glyexp) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:glyexp': #>  #>     select_var #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://glycoverse.github.io/glymotif/articles/with-exp.html","id":"meet-our-star-player-real-glycoproteomics-data","dir":"Articles","previous_headings":"","what":"Meet Our Star Player: Real Glycoproteomics Data 🌟","title":"Working with glyexp","text":"Time roll sleeves dive good stuff! 💪 Let’s work real-world dataset showcase glymotif can teams actual experimental data. ’ll use glyread::read_pglyco3_pglycoquant() load data proper glyexp::experiment() object — think data’s new home everything organized ready analysis. also use glyclean::auto_clean() preprocess data. Now, let’s peek hood see treasures ’re working ! 👀 beautiful N-glycoproteomics dataset featuring 500 PSMs (Peptide Spectrum Matches) across 12 samples — perfect playground motif analysis! 🎮 Pro tip: 💡 real-world data analysis, ’ll definitely want use glyclean perform data preprocessing diving analysis. Think washing vegetables cooking—essential best results! 🥕","code":"library(glyread) library(glyclean) #>  #> Attaching package: 'glyclean' #> The following object is masked from 'package:stats': #>  #>     aggregate  exp <- glyread::read_pglyco3_pglycoquant(   \"glycopeptides.list\",   sample_info = \"sample_info.csv\",   glycan_type = \"N\" ) |>    mutate_obs(sample = stringr::str_split_i(sample, \"-\", -1)) |>   auto_clean() #> ℹ Reading data #> ✔ Reading data [443ms] #>  #> ℹ Parsing glycan compositions and structures #> ✔ Parsing glycan compositions and structures [3.1s] #>  #> ℹ Packing experiment #> ✔ Packing experiment [21ms] #>  #> ℹ Performing protein inference #> ✔ Performing protein inference [336ms] #>  #> ℹ Normalizing data (Median) #> ✔ Normalizing data (Median) [130ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [18ms] #>  #> ℹ Imputing missing values #> ℹ Sample size <= 30, using sample minimum imputation #> ℹ Imputing missing values✔ Imputing missing values [24ms] #>  #> ℹ Aggregating data #> ✔ Aggregating data [146ms] #>  #> ℹ Normalizing data again #> ℹ Detecting batch effects using ANOVA for 263 variables... #> ℹ Normalizing data again✔ Batch effect detection completed. 1 out of 263 variables show significant batch effects (p < 0.05). #> ℹ Normalizing data againℹ Batch effects detected in 0.4% of variables (<=10%). Skipping batch correction. #> ℹ Normalizing data again✔ Normalizing data again [700ms] exp #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 263 variables #> ℹ Sample information fields: group and batch #> ℹ Variable information fields: protein, gene, glycan_composition, glycan_structure, and protein_site get_var_info(exp) #> # A tibble: 263 × 6 #>    variable protein gene     glycan_composition    glycan_structure protein_site #>    <chr>    <chr>   <chr>    <comp>                <structure>             <int> #>  1 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc… NeuAc(??-?)Hex(…          176 #>  2 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc… NeuAc(??-?)Hex(…          344 #>  3 V3       P04196  HRG      Hex(5)HexNAc(4)       Hex(??-?)HexNAc…          344 #>  4 V4       P04196  HRG      Hex(5)HexNAc(4)NeuAc… NeuAc(??-?)Hex(…          344 #>  5 V5       P10909  CLU      Hex(6)HexNAc(5)       Hex(??-?)HexNAc…          291 #>  6 V6       P04196  HRG      Hex(5)HexNAc(4)NeuAc… NeuAc(??-?)Hex(…          344 #>  7 V7       P04196  HRG      Hex(5)HexNAc(4)       Hex(??-?)HexNAc…          345 #>  8 V8       P04196  HRG      Hex(5)HexNAc(4)dHex(… dHex(??-?)Hex(?…          344 #>  9 V9       P04196  HRG      Hex(4)HexNAc(3)       Hex(??-?)HexNAc…          344 #> 10 V10      P04196  HRG      Hex(4)HexNAc(4)NeuAc… NeuAc(??-?)Hex(…          344 #> # ℹ 253 more rows get_sample_info(exp) #> # A tibble: 12 × 3 #>    sample group batch #>    <chr>  <chr> <dbl> #>  1 C_1    C         1 #>  2 C_2    C         2 #>  3 C_3    C         3 #>  4 H_1    H         1 #>  5 H_2    H         2 #>  6 H_3    H         3 #>  7 M_1    M         1 #>  8 M_2    M         2 #>  9 M_3    M         3 #> 10 Y_1    Y         1 #> 11 Y_2    Y         2 #> 12 Y_3    Y         3"},{"path":"https://glycoverse.github.io/glymotif/articles/with-exp.html","id":"adding-motif-annotations-to-an-experiment","dir":"Articles","previous_headings":"","what":"Adding Motif Annotations to an Experiment 🏷️","title":"Working with glyexp","text":"’s things get interesting! 🤔 know variable information tibble contains juicy details glycoform - proteins, sites, glycan structures. want sprinkle motif magic mix? want add columns tell us motifs hiding glycans? simple approach: One motif time (intuitive!) 🎯 tempting approach: Multiple motifs (might tempted …) 🤷‍♀️ Hold , speed racer! 🛑 approach works, ’s efficient, computer won’t thank . ’s : three separate calls have_motif() perform time-consuming validations conversions set glycan structures. ’s like washing dishes three times instead ! 🍽️ Plus, ’s lot repetitive typing. type have_motif glycan_structure three times — talk finger fatigue! 😴 smart approach: Use add_motifs_lgl() add_motifs_int() functions instead! ⚡ might look like simple syntactic sugar, ’re actually optimized powerhouses designed specifically exact scenario: Voilà! 🎉 motif annotations now seamlessly integrated variable information tibble. wait, can actually shiny new columns? 🤔 possibilities endless, ’s tantalizing example get creative juices flowing:","code":"exp |>    mutate_var(n_hex = have_motif(glycan_structure, \"Hex(a1-\")) |>   get_var_info() |>   select(variable, protein, glycan_structure, n_hex) #> # A tibble: 263 × 4 #>    variable protein glycan_structure                                       n_hex #>    <chr>    <chr>   <structure>                                            <lgl> #>  1 V1       P08185  NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)… FALSE #>  2 V2       P04196  NeuAc(??-?)Hex(??-?)HexNAc(??-?)[HexNAc(??-?)]Hex(??-… FALSE #>  3 V3       P04196  Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)H… FALSE #>  4 V4       P04196  NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)He… FALSE #>  5 V5       P10909  Hex(??-?)HexNAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[H… FALSE #>  6 V6       P04196  NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)… FALSE #>  7 V7       P04196  Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)H… FALSE #>  8 V8       P04196  dHex(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[dHex(??-?)He… FALSE #>  9 V9       P04196  Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)]Hex(??-?)Hex… FALSE #> 10 V10      P04196  NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?… FALSE #> # ℹ 253 more rows # Don't do this exp |>   mutate_var(     n_hex = have_motif(glycan_structure, \"Hex(a1-\"),     n_hexna = have_motif(glycan_structure, \"HexNAc(a1-\"),     n_dhex = have_motif(glycan_structure, \"dHex(a1-\")   ) exp2 <- exp |>    add_motifs_lgl(c(motif1 = \"Hex(a1-\", motif2 = \"HexNAc(a1-\", motif3 = \"dHex(a1-\")) exp2 |>   get_var_info() |>   select(variable, motif1, motif2, motif3) #> # A tibble: 263 × 4 #>    variable motif1 motif2 motif3 #>    <chr>    <lgl>  <lgl>  <lgl>  #>  1 V1       FALSE  FALSE  FALSE  #>  2 V2       FALSE  FALSE  FALSE  #>  3 V3       FALSE  FALSE  FALSE  #>  4 V4       FALSE  FALSE  FALSE  #>  5 V5       FALSE  FALSE  FALSE  #>  6 V6       FALSE  FALSE  FALSE  #>  7 V7       FALSE  FALSE  FALSE  #>  8 V8       FALSE  FALSE  FALSE  #>  9 V9       FALSE  FALSE  FALSE  #> 10 V10      FALSE  FALSE  FALSE  #> # ℹ 253 more rows # You can perform pathway enrichment on all glycoproteins containing some motif: exp2 |>   filter_var(motif1 == TRUE) |>   enrich_reactome()  # from the `glystats` package"},{"path":"https://glycoverse.github.io/glymotif/articles/with-exp.html","id":"the-art-of-motif-quantification-in-experiments","dir":"Articles","previous_headings":"","what":"The Art of Motif Quantification in Experiments 📊","title":"Working with glyexp","text":"Now ’re entering truly exciting territory! 🚀 Meet quantify_motifs() — another incredibly useful tool arsenal. function takes glyexp::experiment() object returns brand new one motif quantifications. actually mean? 🤷‍♂️ ’s beautiful concept: quantify motif glycoproteomic context, ’re measuring abundance motifs glycosite sample. information elegantly combines two key pieces: motif count site abundance site. ’s like knowing just many sports cars parking lot, also often parking spot used! 🚗 ’s beautiful part: motif_exp also glyexp::experiment()! 🎭 Think way： describe typical glycoproteomics experiment() “quantities glycans different glycosites different samples”, motif_exp “quantities motifs different glycosites different samples”. ’s elegant structure, just viewed different analytical lens! 🔍 Let’s explore newly minted experiment see treasures holds: Pretty familiar, right? 😊 ’s just like experiment know love, except now ’re quantifying motifs rather glycans. ’s best part: means favorite functions glystats can used experiment! 🎉 ’s like universal remote works new TV： everything just clicks! 📺","code":"motifs <- c(   \"NeuAc(??-?)Hex(??-?)HexNAc(??-\",   \"Hex(??-?)HexNAc(??-\",   \"HexNAc(??-\",   \"NeuAc(??-?)Hex(??-?)[dHex(??-?)]HexNAc(??-\",   \"Hex(??-?)[dHex(??-?)]HexNAc(??-\",   \"dHex(??-?)HexNAc(??-\" ) motif_exp <- quantify_motifs(exp, motifs, alignments = \"terminal\", ignore_linkages = TRUE) # Pro tip: Our motifs don't have linkage information, # but we can still set `ignore_linkages` to TRUE manually to turbocharge the calculation! ⚡ # First, let's peek at the variable information print(get_var_info(motif_exp), n = 12) #> # A tibble: 174 × 5 #>    variable protein gene     protein_site motif                                  #>    <chr>    <chr>   <chr>           <int> <chr>                                  #>  1 V1       P08185  SERPINA6          176 NeuAc(??-?)Hex(??-?)HexNAc(??-         #>  2 V2       P08185  SERPINA6          176 Hex(??-?)HexNAc(??-                    #>  3 V3       P08185  SERPINA6          176 HexNAc(??-                             #>  4 V4       P08185  SERPINA6          176 NeuAc(??-?)Hex(??-?)[dHex(??-?)]HexNA… #>  5 V5       P08185  SERPINA6          176 Hex(??-?)[dHex(??-?)]HexNAc(??-        #>  6 V6       P08185  SERPINA6          176 dHex(??-?)HexNAc(??-                   #>  7 V7       P04196  HRG               344 NeuAc(??-?)Hex(??-?)HexNAc(??-         #>  8 V8       P04196  HRG               344 Hex(??-?)HexNAc(??-                    #>  9 V9       P04196  HRG               344 HexNAc(??-                             #> 10 V10      P04196  HRG               344 NeuAc(??-?)Hex(??-?)[dHex(??-?)]HexNA… #> 11 V11      P04196  HRG               344 Hex(??-?)[dHex(??-?)]HexNAc(??-        #> 12 V12      P04196  HRG               344 dHex(??-?)HexNAc(??-                   #> # ℹ 162 more rows # And now, the expression matrix (where the magic numbers live!) get_expr_mat(motif_exp)[1:12, ] #>     C_1 C_2 C_3 H_1 H_2 H_3 M_1 M_2 M_3 Y_1 Y_2 Y_3 #> V1    0   0   0   0   0   0   0   0   0   0   0   0 #> V2    0   0   0   0   0   0   0   0   0   0   0   0 #> V3    0   0   0   0   0   0   0   0   0   0   0   0 #> V4    0   0   0   0   0   0   0   0   0   0   0   0 #> V5    0   0   0   0   0   0   0   0   0   0   0   0 #> V6    0   0   0   0   0   0   0   0   0   0   0   0 #> V7    0   0   0   0   0   0   0   0   0   0   0   0 #> V8    0   0   0   0   0   0   0   0   0   0   0   0 #> V9    0   0   0   0   0   0   0   0   0   0   0   0 #> V10   0   0   0   0   0   0   0   0   0   0   0   0 #> V11   0   0   0   0   0   0   0   0   0   0   0   0 #> V12   0   0   0   0   0   0   0   0   0   0   0   0 library(glystats)  gly_anova(motif_exp) gly_pca(motif_exp) # And others..."},{"path":"https://glycoverse.github.io/glymotif/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer.","code":""},{"path":"https://glycoverse.github.io/glymotif/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glymotif: Extract glycan motifs glycan structures. R package version 0.4.0, https://glycoverse.github.io/glymotif/.","code":"@Manual{,   title = {glymotif: Extract glycan motifs from glycan structures},   author = {Bin Fu},   year = {2025},   note = {R package version 0.4.0},   url = {https://glycoverse.github.io/glymotif/}, }"},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"glymotif-","dir":"","previous_headings":"","what":"Extract glycan motifs from glycan structures","title":"Extract glycan motifs from glycan structures","text":"goal glymotif extract glycan motifs glycan structures. works seemlessly glyrepr glyparse.","code":""},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract glycan motifs from glycan structures","text":"can install development version glymotif GitHub :","code":"# install.packages(\"pak\") pak::pak(\"glycoverse/glymotif\")"},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Extract glycan motifs from glycan structures","text":"🚀 Get started: 🔧 Motif matching rules: 🔬 Working glyexp::experiment(): 🧬 Dealing N-glycans: 📚 Reference: ","code":""},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"role-in-glycoverse","dir":"","previous_headings":"","what":"Role in glycoverse","title":"Extract glycan motifs from glycan structures","text":"glymotif provides possibilities one important job glyco-bioinformatics: detect motifs glycans. package designed used directly users structural analysis, well provide backend support packages glycoverse ecosystem.","code":""},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extract glycan motifs from glycan structures","text":"Say glycan, … … want check O-Glycan core 1 motif. use motif name directly.","code":"library(glymotif) library(glyparse) (glycan <- parse_iupac_condensed(\"Gal(b1-3)GlcNAc(b1-3)Gal(b1-3)GalNAc(a1-\")) #> <glycan_structure[1]> #> [1] Gal(b1-3)GlcNAc(b1-3)Gal(b1-3)GalNAc(a1- #> # Unique structures: 1 have_motif(glycan, \"Gal(b1-3)GalNAc(a1-\", alignment = \"core\") #> [1] TRUE have_motif(glycan, \"O-Glycan core 1\") #> [1] TRUE"},{"path":"https://glycoverse.github.io/glymotif/reference/add_comp_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Descriptions to Glycan Compositions — add_comp_descriptions","title":"Add Descriptions to Glycan Compositions — add_comp_descriptions","text":"function adds following columns variable information tibble: 'n_hex': number Hex 'n_hexnac': number HexNAc 'n_fuc': number Fuc 'n_neuac': number NeuAc 'n_neugc': number NeuGc 'n_sia': number Sia","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_comp_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Descriptions to Glycan Compositions — add_comp_descriptions","text":"","code":"add_comp_descriptions(exp)"},{"path":"https://glycoverse.github.io/glymotif/reference/add_comp_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Descriptions to Glycan Compositions — add_comp_descriptions","text":"exp glyexp::experiment() object.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_comp_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Descriptions to Glycan Compositions — add_comp_descriptions","text":"experiment object new columns added.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_comp_descriptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Descriptions to Glycan Compositions — add_comp_descriptions","text":"n_sia sum n_neuac n_neugc. function relies glycan_composition column var_info tibble, glyrepr_composition object. use glyread package directly read results search engines (pGlyco3), column automatically added var_info. construct glyexp_experiment object , need ensure column exists type glyrepr_composition. See glyrepr::glycan_composition() glyrepr::as_glycan_composition() create objects manually.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_glycan_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Glycan Descriptions — add_glycan_descriptions","title":"Add Glycan Descriptions — add_glycan_descriptions","text":"function adds glycan description columns variable information tibble glyexp::experiment() object. structure information available, composition structure descriptions added. Otherwise, composition descriptions added.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_glycan_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Glycan Descriptions — add_glycan_descriptions","text":"","code":"add_glycan_descriptions(exp)"},{"path":"https://glycoverse.github.io/glymotif/reference/add_glycan_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Glycan Descriptions — add_glycan_descriptions","text":"exp glyexp::experiment() object.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_glycan_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Glycan Descriptions — add_glycan_descriptions","text":"experiment object new columns added.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_glycan_descriptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Glycan Descriptions — add_glycan_descriptions","text":"function wrapper around add_comp_descriptions() add_struct_descriptions().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/add_motifs_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Motif Annotations to an Experiment — add_motifs_int","title":"Add Motif Annotations to an Experiment — add_motifs_int","text":"function adds motif annotations variable information glyexp::experiment(). add_motifs_int() adds integer annotations (many motifs present). add_motifs_lgl() adds boolean annotations (whether motif present).","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_motifs_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Motif Annotations to an Experiment — add_motifs_int","text":"","code":"add_motifs_int(exp, motifs, alignments = NULL, ignore_linkages = FALSE)  add_motifs_lgl(exp, motifs, alignments = NULL, ignore_linkages = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/add_motifs_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Motif Annotations to an Experiment — add_motifs_int","text":"exp glyexp::experiment() object. motifs character vector motif names, IUPAC-condensed structure strings, 'glyrepr_structure' object. alignments character vector specifying alignment types motif. Can single value (applied motifs) vector length motifs. ignore_linkages logical value. TRUE, linkages ignored comparison.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_motifs_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Motif Annotations to an Experiment — add_motifs_int","text":"glyexp::experiment() object motif annotations added variable information.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_motifs_int.html","id":"about-names","dir":"Reference","previous_headings":"","what":"About Names","title":"Add Motif Annotations to an Experiment — add_motifs_int","text":"naming rule new columns similar have_motifs(). Briefly, can use named character vector name motifs, used new column names. catchup pass named glyrepr::glycan_structure() motifs. fundamental limitation vctrs_rcrd class, glyrepr::glycan_structure() built .","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_motifs_int.html","id":"why-do-we-need-these-functions","dir":"Reference","previous_headings":"","what":"Why do we need these functions","title":"Add Motif Annotations to an Experiment — add_motifs_int","text":"Adding one motif annotation glyexp::experiment() easy:   However, adding multiple motifs straightforward. can still use mutate_var() add multiple motifs like :   method two problems: lot boilerplate code (lot typing) efficient, call count_motif performs validation conversion glycan_structure, time-consuming process. Advanced R users might want use count_motifs() (plural cousin count_motif()) !!!:   Sadly, work. Firstly, count_motifs returns matrix, list. Secondly, even use .data.frame() convert list, !!! triggers early evaluation glycan_structure calling environment, passing count_motifs(). raise \"object found\" error, easy way fix , least now. Therefore, think better function adds multiple motif annotations single call, intuitive way. provide two functions. hood, use straightforward approach: get motif annotation matrix using count_motifs() have_motifs() convert matrix tibble use dplyr::bind_cols() add tibble variable information","code":"exp |>   mutate_var(has_hex = have_motif(glycan_structure, \"Hex\")) exp |>   mutate_var(     n_hex = count_motif(glycan_structure, \"Hex\"),     n_dhex = count_motif(glycan_structure, \"dHex\"),     n_hexnac = count_motif(glycan_structure, \"HexNAc\"),   ) exp |>   mutate_var(!!!count_motifs(glycan_structure, c(\"Hex\", \"dHex\", \"HexNAc\")))"},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/add_struct_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Descriptions to Glycan Structures — add_struct_descriptions","title":"Add Descriptions to Glycan Structures — add_struct_descriptions","text":"function adds columns glycan structural properties variable information tibble. Depending glycan type (N-glycan, O-glycan), different columns added. Current, N-glycan descriptions implemented. See describe_n_glycans() columns added.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_struct_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Descriptions to Glycan Structures — add_struct_descriptions","text":"","code":"add_struct_descriptions(exp)"},{"path":"https://glycoverse.github.io/glymotif/reference/add_struct_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Descriptions to Glycan Structures — add_struct_descriptions","text":"exp glyexp::experiment() object.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_struct_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Descriptions to Glycan Structures — add_struct_descriptions","text":"experiment object new columns added.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/add_struct_descriptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Descriptions to Glycan Structures — add_struct_descriptions","text":"function relies glycan_structure column var_info tibble, glyrepr_structure object. use glyread package directly read results search engines (pGlyco3), column automatically added var_info. construct glyexp_experiment object , need ensure column exists type glyrepr_structure. See glyrepr::glycan_structure() glyrepr::as_glycan_structure() create objects manually.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Motifs — available_motifs","title":"Get Available Motifs — available_motifs","text":"function returns names available motifs available package.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Motifs — available_motifs","text":"","code":"available_motifs()"},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Motifs — available_motifs","text":"character vector motif names.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Motifs — available_motifs","text":"","code":"available_motifs()[1:5] #> [1] \"Blood group H (type 2) - Lewis y\" \"i antigen\"                        #> [3] \"LacdiNAc\"                         \"GT2\"                              #> [5] \"Blood group B (type 1) - Lewis b\""},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Count How Many Times Glycans have the Given Motif(s) — count_motif","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"functions closely related have_motif(). However, instead returning logical values, return number times glycans motif(s). count_motif() counts single motif multiple glycans count_motifs() counts multiple motifs multiple glycans","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"","code":"count_motif(glycans, motif, alignment = NULL, ignore_linkages = FALSE)  count_motifs(glycans, motifs, alignments = NULL, ignore_linkages = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"glycans 'glyrepr_structure' object, IUPAC-condensed structure string vector. motif 'glyrepr_structure' object, IUPAC-condensed structure string, known motif name (use available_motifs() see available motifs). alignment character string. Possible values \"substructure\", \"core\", \"terminal\" \"whole\". provided, value decided based motif argument. motif motif name, alignment database used. Otherwise, \"substructure\" used. ignore_linkages logical value. TRUE, linkages ignored comparison. motifs character vector motif names, IUPAC-condensed structure strings, 'glyrepr_structure' object. alignments character vector specifying alignment types motif. Can single value (applied motifs) vector length motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"count_motif(): integer vector indicating many times glycan motif. count_motifs(): integer matrix rows correspond glycans columns correspond motifs. Row names contain glycan identifiers column names contain motif identifiers.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"function actually perform v2f algorithm get possible matches glycans motif. However, result necessarily number matches. Think following example: glycan: Gal(b1-?)[Gal(b1-?)]GlcNAc(b1-4)GlcNAc motif: Gal(b1-?)[Gal(b1-?)]GlcNAc(b1- draw glycan :   draw motif :   differentiate galactoses, number \"Gal 1\" \"Gal 2\" glycan motif. v2f subisomorphic algorithm return two matches: Gal 1 glycan matches Gal 1 motif, Gal 2 matches Gal 2. Gal 1 glycan matches Gal 2 motif, Gal 2 matches Gal 1. However, biological perspective, two matches . function take care , return \"unique\" number matches. details handling monosaccharide, linkages, alignment, substituents, implementation, see have_motif().","code":"Gal 1    \\ b1-? b1-4     GlcNAc -- GlcNAc    / b1-? Gal 2 Gal 1    \\ b1-?     GlcNAc b1-    / b1-? Gal 2"},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":"about-names","dir":"Reference","previous_headings":"","what":"About Names","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"have_motif() count_motif() return vector names. easy trace names back original glycans. have_motifs() count_motifs() return matrix row column names. row names glycan names, column names motif names. names decided according following rules: glycans motifs glyrepr::glycan_structure() object, names IUPAC-condensed structure strings. (Sadly due constrains vctrs package glyrepr::glycan_structure() built , glyrepr::glycan_structure() vector names.) glycans motifs character vector, either IUPAC-condensed structure strings motif names, use names character vector exists, otherwise use character vector names.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/count_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count How Many Times Glycans have the Given Motif(s) — count_motif","text":"","code":"library(glyparse)  count_motif(\"Gal(b1-3)Gal(b1-3)GalNAc\", \"Gal(b1-\") #> [1] 2 count_motif(   \"Man(b1-?)[Man(b1-?)]GalNAc(b1-4)GlcNAc\",   \"Man(b1-?)[Man(b1-?)]GalNAc\" ) #> [1] 1 count_motif(\"Gal(b1-3)Gal\", \"Man\") #> [1] 0  # Vectorized usage with single motif count_motif(c(\"Gal(b1-3)Gal(b1-3)GalNAc\", \"Gal(b1-3)GalNAc\"), \"Gal(b1-\") #> [1] 2 1  # Multiple motifs with count_motifs() glycan1 <- parse_iupac_condensed(\"Gal(b1-3)Gal(b1-3)GalNAc\") glycan2 <- parse_iupac_condensed(\"Man(b1-?)[Man(b1-?)]GalNAc(b1-4)GlcNAc\") glycans <- c(glycan1, glycan2)  motifs <- c(\"Gal(b1-3)GalNAc\", \"Gal(b1-\", \"Man(b1-\") result <- count_motifs(glycans, motifs) print(result) #>                                            Gal(b1-3)GalNAc Gal(b1- Man(b1- #> Gal(b1-3)Gal(b1-3)GalNAc(?1-                             1       2       0 #> Man(b1-?)[Man(b1-?)]GalNAc(b1-4)GlcNAc(?1-               0       0       2  # Monosaccharide type matching examples # Concrete glycan vs generic motif: matches (glycan converted to generic) count_motif(\"Man\", \"Hex\")  # Returns 1 #> [1] 1  # Generic glycan vs concrete motif: doesn't match count_motif(\"Hex\", \"Man\")  # Returns 0 #> [1] 0  # Matrix example showing type matching rules count_motifs(glycans = c(\"Hex\", \"Man\"), motifs = c(\"Hex\", \"Man\")) #>     Hex Man #> Hex   1   0 #> Man   1   1"},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe N-Glycans Properties — describe_n_glycans","title":"Describe N-Glycans Properties — describe_n_glycans","text":"Extract key properties N-glycans, including: \"glycan_type\": N-glycan type: high mannose, hybrid, complex, paucimannose. \"bisecting\": Bisecting GlcNAc presence. \"antennae\": Number antennae. \"core_fuc\": Number core fucoses. \"arm_fuc\": Number arm fucoses. \"terminal_gal\": Number terminal galactoses.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe N-Glycans Properties — describe_n_glycans","text":"","code":"describe_n_glycans(glycans, strict = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe N-Glycans Properties — describe_n_glycans","text":"glycans glyrepr_structure object, character vector IUPAC-condensed structure strings. strict logical value. TRUE, glycan must \"concrete\" monosaccharides (e.g. \"GlcNAc\", \"Man\", \"Gal\") linkage information. FALSE, function lenient, checking monosaacharide identities \"generic\" level (e.g. \"Hex\", \"HexNAc\") ignoring linkage information. Default FALSE. preferred cases structural resolution high, known sure glycans indeed N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe N-Glycans Properties — describe_n_glycans","text":"tibble following columns: \"glycan_type\", \"bisecting\", \"antennae\", \"core_fuc\", \"arm_fuc\", \"terminal_gal\". input glycans names, tibble \"glycan\" column. Otherwise, IUPAC-condensed strings used \"glycan\" column.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Describe N-Glycans Properties — describe_n_glycans","text":"function designed work N-glycans . glycans N-glycans, error thrown.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"strictness","dir":"Reference","previous_headings":"","what":"Strictness","title":"Describe N-Glycans Properties — describe_n_glycans","text":"default (strict = FALSE), function lenient motif checking. checks monosaccharide types \"generic\" level (e.g. \"Hex\", \"HexNAc\"), ignores linkage information. preferred cases structural resolution high, e.g. glycoproteomics studies. However, glycans guaranteed N-glycans glycosylation sites. case, make assumptions glycan structures, extract key properties. example, H-N terminal motif considered terminal galactose. high-resolution glycan structures, can set strict = TRUE.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe N-Glycans Properties — describe_n_glycans","text":"","code":"library(purrr)  glycans <- c(   \"Man(a1-3)[Man(a1-3)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(?1-\",   \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(?1-\" ) describe_n_glycans(glycans) #> # A tibble: 2 × 7 #>   glycan_type  bisecting n_antennae n_core_fuc n_arm_fuc n_gal n_terminal_gal #>   <chr>        <lgl>          <int>      <int>     <int> <int>          <int> #> 1 paucimannose FALSE             NA          0         0     0              0 #> 2 complex      FALSE              1          0         0     0              0"},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Structures, Alignments, or Aglycons of Known Motifs — get_motif_structure","title":"Get the Structures, Alignments, or Aglycons of Known Motifs — get_motif_structure","text":"Given character vector motifs names GlycoMotif GlyGen Collection, functions return structures, alignments, aglycons motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Structures, Alignments, or Aglycons of Known Motifs — get_motif_structure","text":"","code":"get_motif_structure(name)  get_motif_alignment(name)  get_motif_aglycon(name)"},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Structures, Alignments, or Aglycons of Known Motifs — get_motif_structure","text":"name character vector motif name.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Structures, Alignments, or Aglycons of Known Motifs — get_motif_structure","text":"get_motif_structure() returns glycan_graph name character scalar, list glycan_graph name character vector. get_motif_alignment() returns character vector motif alignments. get_motif_aglycon() returns character vector motif aglycons. three functions, name length greater 1, return value named motif names.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Structures, Alignments, or Aglycons of Known Motifs — get_motif_structure","text":"","code":"get_motif_structure(\"N-Glycan core basic\") #> <glycan_structure[1]> #> [1] Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(?1- #> # Unique structures: 1 get_motif_alignment(\"N-Glycan core basic\") #> [1] \"core\" get_motif_aglycon(\"N-Glycan core basic\") #> [1] \"Asn\"  get_motif_structure(c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> <glycan_structure[2]> #> [1] Gal(b1-3)GalNAc(a1- #> [2] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> # Unique structures: 2 get_motif_alignment(c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> O-Glycan core 1 O-Glycan core 2  #>          \"core\"          \"core\"  get_motif_aglycon(c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> O-Glycan core 1 O-Glycan core 2  #>       \"Ser/Thr\"       \"Ser/Thr\""},{"path":"https://glycoverse.github.io/glymotif/reference/glymotif-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glymotif: Extract glycan motifs from glycan structures — glymotif-package","title":"glymotif: Extract glycan motifs from glycan structures — glymotif-package","text":"package extracts glycan motifs (substructures) glycan structures. also determine common structural properties N-glycans, e.g. number antennae, number branches, etc.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/glymotif-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glymotif: Extract glycan motifs from glycan structures — glymotif-package","text":"Maintainer: Bin Fu 23110220018@m.fudan.edu.cn (ORCID)","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the Glycans have the Given Motif(s) — have_motif","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"functions check given glycans given motif(s). have_motif() checks single motif multiple glycans have_motifs() checks multiple motifs multiple glycans Technically speaking, perform subgraph isomorphism tests determine motif(s) subgraphs glycans. Monosaccharides, linkages, substituents considered.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"","code":"have_motif(glycans, motif, alignment = NULL, ignore_linkages = FALSE)  have_motifs(glycans, motifs, alignments = NULL, ignore_linkages = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"glycans 'glyrepr_structure' object, IUPAC-condensed structure string vector. motif 'glyrepr_structure' object, IUPAC-condensed structure string, known motif name (use available_motifs() see available motifs). alignment character string. Possible values \"substructure\", \"core\", \"terminal\" \"whole\". provided, value decided based motif argument. motif motif name, alignment database used. Otherwise, \"substructure\" used. ignore_linkages logical value. TRUE, linkages ignored comparison. motifs character vector motif names, IUPAC-condensed structure strings, 'glyrepr_structure' object. alignments character vector specifying alignment types motif. Can single value (applied motifs) vector length motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"have_motif(): logical vector indicating glycan motif. have_motifs(): logical matrix rows correspond glycans columns correspond motifs. Row names contain glycan identifiers column names contain motif identifiers.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"about-names","dir":"Reference","previous_headings":"","what":"About Names","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"have_motif() count_motif() return vector names. easy trace names back original glycans. have_motifs() count_motifs() return matrix row column names. row names glycan names, column names motif names. names decided according following rules: glycans motifs glyrepr::glycan_structure() object, names IUPAC-condensed structure strings. (Sadly due constrains vctrs package glyrepr::glycan_structure() built , glyrepr::glycan_structure() vector names.) glycans motifs character vector, either IUPAC-condensed structure strings motif names, use names character vector exists, otherwise use character vector names.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"monosaccharide-type","dir":"Reference","previous_headings":"","what":"Monosaccharide type","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"can different monosaccharide types (\"concrete\" \"generic\", see glyrepr::get_mono_type()). matching rules : motif \"generic\", glycans converted \"generic\" type comparison, allowing concrete generic glycans match generic motifs. motif \"concrete\", glycans used -, concrete glycans matching monosaccharide names match, generic glycans match. Examples: Man (concrete glycan) vs Hex (generic motif) → TRUE (Man converted Hex comparison) Hex (generic glycan) vs Man (concrete motif) → FALSE (names match) Man (concrete glycan) vs Man (concrete motif) → TRUE (exact match) Hex (generic glycan) vs Hex (generic motif) → TRUE (exact match)","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"linkages","dir":"Reference","previous_headings":"","what":"Linkages","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"Obscure linkages (e.g. \"??-?\") allowed motif graph (see glyrepr::possible_linkages()). \"?\" motif graph means \"anything OK\", match linkage glycan graph. However, \"?\" glycan graph match \"?\" motif graph. can set ignore_linkages = TRUE ignore linkages comparison. examples: \"b1-?\" motif match \"b1-4\" glycan. \"b1-?\" motif match \"b1-?\" glycan. \"b1-4\" motif match \"b1-?\" glycan. \"a1-?\" motif match \"b1-4\" glycan. \"a1-?\" motif match \"?-4\" glycan. motifs glycans can \"half-linkage\" reducing end, e.g. \"GlcNAc(b1-\". half linkage motif matched linkage glycan, half linkage glycan. e.g. Glycan \"GlcNAc(b1-4)Gal(a1-\" \"GlcNAc(b1-\" \"Gal(a1-\" motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"alignment","dir":"Reference","previous_headings":"","what":"Alignment","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"According GlycoMotif database, motif can classified four alignment types: \"substructure\": motif can anywhere glycan. default. See substructure details. \"core\": motif must align least one connected substructure (subtree) reducing end glycan. See glycan core details. \"terminal\": motif must align least one connected substructure (subtree) nonreducing end glycan. See nonreducing end details. \"whole\": motif must align entire glycan. See whole-glycan details. using known motifs GlycoMotif GlyGen Collection, best practice provide alignment argument, let function decide alignment based motif name. However, still possible override default alignments. case, user-provided alignments used, warning issued.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"substituents","dir":"Reference","previous_headings":"","what":"Substituents","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"Substituents (e.g. \"Ac\", \"SO3\") matched strict mode. single multiple substituents supported: Single substituents: \"Neu5Ac-9Ac\" match \"Neu5Ac-9Ac\" \"Neu5Ac\" Multiple substituents: \"Glc3Me6S\" (3Me 6S) match motifs contain substituents, e.g., \"Glc3Me6S\", \"Glc?Me6S\", \"Glc3Me?S\" \"Glc3Me6S\" match \"Glc3Me\" (missing 6S) \"Glc\" (missing ) multiple substituents, internally stored comma-separated values (e.g. \"3Me,6S\") matched individually. substituent motif must corresponding match glycan, vice versa. Obscure linkages motif substituents match linkage glycan substituents: Motif \"Neu5Ac-?Ac\" match \"Neu5Ac-9Ac\" glycan Motif \"Glc?Me6S\" match \"Glc3Me6S\" glycan (? matches 3) Motif \"Glc3Me?S\" match \"Glc3Me6S\" glycan (? matches 6)","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"hood, function uses igraph::graph.get.subisomorphisms.vf2() get possible subgraph isomorphisms glycan motif. color vertex attributes added graphs distinguish monosaccharides. possible matches, function checks following: Alignment: using alignment_check() Substituents: using substituent_check() Linkages: using linkage_check() Anomer: using anomer_check() function returns TRUE matches pass checks.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/have_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the Glycans have the Given Motif(s) — have_motif","text":"","code":"library(glyparse) library(glyrepr)  (glycan <- o_glycan_core_2(mono_type = \"concrete\")) #> <glycan_structure[1]> #> [1] Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1- #> # Unique structures: 1  # The glycan has the motif \"Gal(b1-3)GalNAc\" have_motif(glycan, \"Gal(b1-3)GalNAc\") #> [1] TRUE  # But not \"Gal(b1-4)GalNAc\" (wrong linkage) have_motif(glycan, \"Gal(b1-4)GalNAc\") #> [1] FALSE  # Set `ignore_linkages` to `TRUE` to ignore linkages have_motif(glycan, \"Gal(b1-4)GalNAc\", ignore_linkages = TRUE) #> [1] TRUE  # Different monosaccharide types are allowed have_motif(glycan, \"Hex(b1-3)HexNAc\") #> [1] TRUE  # Obscure linkages in the `motif` graph are allowed have_motif(glycan, \"Gal(b1-?)GalNAc\") #> [1] TRUE  # However, obscure linkages in `glycan` will only match \"?\" in the `motif` graph glycan_2 <- parse_iupac_condensed(\"Gal(b1-?)[GlcNAc(b1-6)]GalNAc\") have_motif(glycan_2, \"Gal(b1-3)GalNAc\") #> [1] FALSE have_motif(glycan_2, \"Gal(b1-?)GalNAc\") #> [1] TRUE  # The anomer of the motif will be matched to linkages in the glycan have_motif(glycan_2, \"GlcNAc(b1-\") #> [1] TRUE  # Alignment types # The default type is \"substructure\", which means the motif can be anywhere in the glycan. # Other options include \"core\", \"terminal\" and \"whole\". glycan_3 <- parse_iupac_condensed(\"Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal\") motifs <- c(   \"Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal\",   \"Gal(a1-3)Gal(a1-4)Gal\",            \"Gal(a1-4)Gal(a1-6)Gal\",            \"Gal(a1-4)Gal\" )  purrr::map_lgl(motifs, ~ have_motif(glycan_3, .x, alignment = \"whole\")) #> [1]  TRUE FALSE FALSE FALSE purrr::map_lgl(motifs, ~ have_motif(glycan_3, .x, alignment = \"core\")) #> [1]  TRUE FALSE  TRUE FALSE purrr::map_lgl(motifs, ~ have_motif(glycan_3, .x, alignment = \"terminal\")) #> [1]  TRUE  TRUE FALSE FALSE purrr::map_lgl(motifs, ~ have_motif(glycan_3, .x, alignment = \"substructure\")) #> [1] TRUE TRUE TRUE TRUE  # Substituents glycan_4 <- \"Neu5Ac9Ac(a2-3)Gal(b1-4)GlcNAc\" glycan_5 <- \"Neu5Ac(a2-3)Gal(b1-4)GlcNAc\"  have_motif(glycan_4, glycan_5) #> [1] FALSE have_motif(glycan_5, glycan_4) #> [1] FALSE have_motif(glycan_4, glycan_4) #> [1] TRUE have_motif(glycan_5, glycan_5) #> [1] TRUE  # Multiple substituents glycan_6 <- \"Glc3Me6S\"  # has both 3Me and 6S substituents have_motif(glycan_6, \"Glc3Me6S\")  # TRUE: exact match #> [1] TRUE have_motif(glycan_6, \"Glc?Me6S\")  # TRUE: obscure linkage ?Me matches 3Me #> [1] TRUE have_motif(glycan_6, \"Glc3Me?S\")  # TRUE: obscure linkage ?S matches 6S #> [1] TRUE have_motif(glycan_6, \"Glc3Me\")    # FALSE: missing 6S substituent #> [1] FALSE have_motif(glycan_6, \"Glc\")       # FALSE: missing all substituents #> [1] FALSE  # Vectorization with single motif glycans <- c(glycan, glycan_2, glycan_3) motif <- \"Gal(b1-3)GalNAc\" have_motif(glycans, motif) #> [1]  TRUE FALSE FALSE  # Multiple motifs with have_motifs() glycan1 <- o_glycan_core_2(mono_type = \"concrete\") glycan2 <- parse_iupac_condensed(\"Gal(b1-?)[GlcNAc(b1-6)]GalNAc\") glycans <- c(glycan1, glycan2)  motifs <- c(\"Gal(b1-3)GalNAc\", \"Gal(b1-4)GalNAc\", \"GlcNAc(b1-6)GalNAc\") have_motifs(glycans, motifs) #>                                   Gal(b1-3)GalNAc Gal(b1-4)GalNAc #> Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1-            TRUE           FALSE #> GlcNAc(b1-6)[Gal(b1-?)]GalNAc(?1-           FALSE           FALSE #>                                   GlcNAc(b1-6)GalNAc #> Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1-               TRUE #> GlcNAc(b1-6)[Gal(b1-?)]GalNAc(?1-               TRUE  # You can assign each motif a name motifs <- c(motif1 = \"Gal(b1-3)GalNAc\", motif2 = \"Gal(b1-4)GalNAc\", motif3 = \"GlcNAc(b1-6)GalNAc\") have_motifs(glycans, motifs) #>                                   motif1 motif2 motif3 #> Gal(b1-3)[GlcNAc(b1-6)]GalNAc(a1-   TRUE  FALSE   TRUE #> GlcNAc(b1-6)[Gal(b1-?)]GalNAc(?1-  FALSE  FALSE   TRUE"},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Motif is Known — is_known_motif","title":"Check if a Motif is Known — is_known_motif","text":"function checks motifs known motifs GlycoMotif GlyGen Collection.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Motif is Known — is_known_motif","text":"","code":"is_known_motif(name)"},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Motif is Known — is_known_motif","text":"name character vector motif name.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Motif is Known — is_known_motif","text":"logical vector.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Glycan is an N-Glycan — is_n_glycan","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"function checks glycan N-glycan core motif:","code":"Man    \\     Man - GlcNAc - GlcNAc    / Man"},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"","code":"is_n_glycan(glycan, strict = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"glycan glycan_graph object, character string IUPAC condensed format. strict logical value. TRUE, glycan must \"concrete\" monosaccharides (e.g. \"GlcNAc\", \"Man\", \"Gal\") linkage information. FALSE, function lenient, checking monosaacharide identities \"generic\" level (e.g. \"Hex\", \"HexNAc\") ignoring linkage information. Default FALSE. preferred cases structural resolution high, known sure glycans indeed N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"logical value.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine N-Glycan Key Properties — n_glycan_type","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"functions check key properties N-glycan: n_glycan_type(): Determine N-glycan type. has_bisecting(): Check glycan bisecting GlcNAc. n_antennae(): Count number antennae. n_core_fuc(): Count number core fucoses. n_arm_fuc(): Count number arm fucoses. n_gal(): Count number galactoses. n_terminal_gal(): Count number terminal galactoses.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"","code":"n_glycan_type(glycan, strict = FALSE)  has_bisecting(glycan, strict = FALSE)  n_antennae(glycan, strict = FALSE)  n_core_fuc(glycan, strict = FALSE)  n_arm_fuc(glycan, strict = FALSE)  n_gal(glycan, strict = FALSE)  n_terminal_gal(glycan, strict = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"glycan glycan_graph object, character string IUPAC condensed format. strict logical value. TRUE, glycan must \"concrete\" monosaccharides (e.g. \"GlcNAc\", \"Man\", \"Gal\") linkage information. FALSE, function lenient, checking monosaacharide identities \"generic\" level (e.g. \"Hex\", \"HexNAc\") ignoring linkage information. Default FALSE. preferred cases structural resolution high, known sure glycans indeed N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"n_glycan_type(): character scalar indicating N-glycan type, either \"highmannose\", \"hybrid\", \"complex\", \"paucimannose\". has_bisecting(): logical value indicating glycan bisecting GlcNAc. n_antennae(): integer scalar indicating number antennae. n_core_fuc(): integer scalar indicating number core fucoses. n_arm_fuc(): integer scalar indicating number arm fucoses. n_gal(): integer scalar indicating number galactoses. n_terminal_gal(): integer scalar indicating number terminal galactoses.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-glycan-type-n-glycan-types","dir":"Reference","previous_headings":"","what":"n_glycan_type(): N-Glycan Types","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Four types N-glycans recognized: high mannose, hybrid, complex, paucimannose. information N-glycan types, see Essentials Glycobiology.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"has-bisecting-bisecting-glcnac","dir":"Reference","previous_headings":"","what":"has_bisecting(): Bisecting GlcNAc","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Bisecting GlcNAc GlcNAc residue attached core mannose N-glycans.","code":"Man         \\ GlcNAc - Man - GlcNAc - GlcNAc ~~~~~~  /      Man"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-antennae-number-of-antennae","dir":"Reference","previous_headings":"","what":"n_antennae(): Number of Antennae","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"number antennae number branching GlcNAc core mannoses complex N-glycan. Bisecting GlcNAc counted antenna. functions returns NA_integer_ non-complex N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-core-fuc-number-of-core-fucoses","dir":"Reference","previous_headings":"","what":"n_core_fuc(): Number of Core Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Core fucoses fucose residues attached core GlcNAc N-glycan.","code":"Man             Fuc  <- core fucose    \\             |     Man - GlcNAc - GlcNAc    / Man"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-arm-fuc-number-of-arm-fucoses","dir":"Reference","previous_headings":"","what":"n_arm_fuc(): Number of Arm Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Arm focuses thoses focuse residues attached branching GlcNAc N-glycan.","code":"Fuc  <- arm fucose   | GlcNAc - Man             \\              Man - GlcNAc - GlcNAc             / GlcNAc - Man"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-gal-number-of-galactoses","dir":"Reference","previous_headings":"","what":"n_gal(): Number of Galactoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"function seems useless silly. , well-structured glycan concrete monosaccharides. However, \"Hex\" \"H\" hand, tricky know many \"Gal\" many \"Man\". function makes simply assumption rightmost \"H\" \"H-H-N-H\" unit galactose. two \"H\" left mannoses N-glycan core. \"N\" GlcNAc attached one core mannose. method used strict = FALSE. strict = TRUE, function authentically check number \"Gal\".","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-terminal-gal-number-of-terminal-galactoses","dir":"Reference","previous_headings":"","what":"n_terminal_gal(): Number of Terminal Galactoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Terminal galactoses galactose residues non-reducing end without sialic acid capping.","code":"Gal - GlcNAc - Man          ~~~               \\      terminal Gal           Man - GlcNAc - GlcNAc                            / Neu5Ac - Gal - GlcNAc - Man          ~~~    not terminal Gal"},{"path":"https://glycoverse.github.io/glymotif/reference/quantify_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify motifs in an experiment — quantify_motifs","title":"Quantify motifs in an experiment — quantify_motifs","text":"function takes glyexp::experiment(), returns new glyexp::experiment() motif quantifications. new experiment different normal glyexp::experiment() three ways: \"glycan_structure\" \"glycan_composition\" column, \"motif\" column instead. metadata field \"exp_type\" \"motifomics\", \"glycoproteomics\" glycomics. can understand \"motif experiment\" way: glycoproteomics data, instead containing quantification glycan glycosite, now contains quantification motif glycosite sample. glycomics data, contains motif quantification sample. Due unified data structure glyexp::experiment(), returned motif experiment can passed downstream glycoverse functions like glystats::gly_ttest() statistical analysis. Also, can use as_tibble() convert \"tidy\" tibble custom analysis.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/quantify_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantify motifs in an experiment — quantify_motifs","text":"","code":"quantify_motifs(exp, motifs, alignments = NULL, ignore_linkages = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/quantify_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantify motifs in an experiment — quantify_motifs","text":"exp glyexp::experiment() object containing glycoproteomics data. motifs character vector motif names, IUPAC-condensed structure strings, 'glyrepr_structure' object. alignments character vector specifying alignment types motif. Can single value (applied motifs) vector length motifs. ignore_linkages logical value. TRUE, linkages ignored comparison.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/quantify_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantify motifs in an experiment — quantify_motifs","text":"glyexp::experiment() object containing motif quantifications.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/quantify_motifs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantify motifs in an experiment — quantify_motifs","text":"comprehensive comparison input experiment returned experiment: Sample information: Sample information change. Variable information: Firstly, define \"base variables\" unique combination columns variable information tibble except \"variable\", \"glycan_composition\", \"glycan_structure\". new var_info Cartesian product \"base variables\" motifs. glycomics data, \"base variable\" defined, resulted var_info contains \"motif\" column. Expression matrix: Rows variables, columns samples, . Filling cells quantifications motifs different glycosites sample, instead quantifications glycoforms glycopeptides. just motif quantification sample, glycomics data.","code":""},{"path":[]},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"major-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"glymotif 0.4.0","text":"Add quantify_motifs() quantify motifs glyexp::experiment().","code":""},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"glymotif 0.4.0","text":"new “Get Started” vignette, covering basic motif matching functions. new “N-Glycans” vignette, covering N-glycan-specific functions. new “Working glyexp::experiment()” vignette, covering integration glyexp::experiment().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"minor-improvements-0-3-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"glymotif 0.3.1","text":"Update documentation reflect naming rules return values have_motif(), have_motifs(), count_motif(), count_motifs().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"glymotif 0.3.0","text":"Add add_glycan_descriptions(), add_struct_descriptions(), add_comp_descriptions(). functions moved glyexp glymotif better separation concerns. Add add_motifs_int() add_motifs_lgl() adding motif annotations glyexp::experiment().","code":""},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"glymotif 0.3.0","text":"Remove parallel argument add_glycan_descriptions(), add_struct_descriptions(), add_comp_descriptions(). found useful regular basis. Update vignette reflect new functions .","code":""},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"glymotif 0.3.0","text":"Fix bug get_motif_structure(), order results consistent order input motifs. caused unexpected results wide range functions including have_motifs(), count_motifs(), new add_motifs_lgl() add_motifs_int() functions, using motif names input. Alone get_motif_structure(), similar bugs get_motif_alignment() get_motif_aglycon() also fixed.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"minor-improvements-0-2-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"glymotif 0.2.1","text":"have_motif(), have_motifs(), count_motif(), count_motifs() now support multiple substituents motif, align updates glyrepr v0.5.0.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"glymotif 0.2.0","text":"Generic glycans can longer cause errors compared concrete motifs Concrete glycans now properly match generic motifs (converted generic first) Generic glycans correctly return FALSE compared concrete motifs resolves incorrect results mixed-type motif matrices","code":""},{"path":"https://glycoverse.github.io/glymotif/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glymotif 0.2.0","text":"Note: technically backward compatible API, behavior change monosaccharide type matching may affect code depended previous (incorrect) error-throwing wrong-result behavior.","code":""}]
