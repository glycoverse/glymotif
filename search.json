[{"path":[]},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glymotif/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glymotif","title":"Contributing to glymotif","text":"outlines propose change glymotif. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glymotif","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glymotif","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glymotif","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glymotif\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glymotif","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glymotif/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glymotif","text":"Please note glymotif project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glymotif/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 glymotif authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glymotif","title":"Getting help with glymotif","text":"Thanks using glymotif! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glymotif","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glymotif","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glymotif/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glymotif","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glymotif/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer.","code":""},{"path":"https://glycoverse.github.io/glymotif/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glymotif: Extract glycan motifs glycan structures. R package version 0.0.0.9001, https://glycoverse.github.io/glymotif/.","code":"@Manual{,   title = {glymotif: Extract glycan motifs from glycan structures},   author = {Bin Fu},   year = {2025},   note = {R package version 0.0.0.9001},   url = {https://glycoverse.github.io/glymotif/}, }"},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"glymotif-","dir":"","previous_headings":"","what":"Extract glycan motifs from glycan structures","title":"Extract glycan motifs from glycan structures","text":"goal glymotif extract glycan motifs glycan structures. works seemlessly glyrepr glyparse.","code":""},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract glycan motifs from glycan structures","text":"can install development version glymotif GitHub :","code":"# install.packages(\"pak\") pak::pak(\"glycoverse/glymotif\")"},{"path":"https://glycoverse.github.io/glymotif/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extract glycan motifs from glycan structures","text":"Say glycan, … … want check O-Glycan core 1 motif. use motif name directly.","code":"library(glymotif) library(glyparse) (glycan <- parse_iupac_condensed(\"Gal(b1-3)GlcNAc(b1-3)Gal(b1-3)GalNAc(a1-\")) #> Glycan Graph (NE) #> Gal: 2, GalNAc: 1, GlcNAc: 1 #> ------------------ #> GalNAc (a1-) #> └─Gal (b1-3) #>   └─GlcNAc (b1-3) #>     └─Gal (b1-3) has_motif(glycan, \"Gal(b1-3)GalNAc(a1-\", alignment = \"core\") #> [1] TRUE has_motif(glycan, \"O-Glycan core 1\") #> [1] TRUE"},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Motifs — available_motifs","title":"Get Available Motifs — available_motifs","text":"function returns names available motifs available package.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Motifs — available_motifs","text":"","code":"available_motifs()"},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Motifs — available_motifs","text":"character vector motif names.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/available_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Motifs — available_motifs","text":"","code":"available_motifs()[1:5] #> [1] \"Blood group H (type 2) - Lewis y\" \"i antigen\"                        #> [3] \"LacdiNAc\"                         \"GT2\"                              #> [5] \"Blood group B (type 1) - Lewis b\""},{"path":"https://glycoverse.github.io/glymotif/reference/counts_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Count How Many Times a Glycan has the Given Motif — counts_motif","title":"Count How Many Times a Glycan has the Given Motif — counts_motif","text":"function closely related has_motif(). However, instead returning logical value, returns number times glycan motif.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/counts_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count How Many Times a Glycan has the Given Motif — counts_motif","text":"","code":"counts_motif(glycan, motif, alignment = NULL, ignore_linkages = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/counts_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count How Many Times a Glycan has the Given Motif — counts_motif","text":"glycan 'glycan_graph' object, IUPAC-condensed structure string. motif 'glycan_graph' object, IUPAC-condensed structure string, known motif name (use available_motifs() see available motifs). alignment character string. Possible values \"substructure\", \"core\", \"terminal\" \"whole\". provided, value decided based motif argument. motif motif name, alignment database used. Otherwise, \"substructure\" used. ignore_linkages logical value. TRUE, linkages ignored comparison.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/counts_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count How Many Times a Glycan has the Given Motif — counts_motif","text":"integer indicating many times glycan motif.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/counts_motif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count How Many Times a Glycan has the Given Motif — counts_motif","text":"function actually perform v2f algorithm get possible matches glycan motif. However, result necessarily number matches. Think following example: glycan: Gal(b1-?)[Gal(b1-?)]GlcNAc(b1-4)GlcNAc motif: Gal(b1-?)[Gal(b1-?)]GlcNAc(b1-) draw glycan :   draw motif :   differentiate galactoses, number \"Gal 1\" \"Gal 2\" glycan motif. v2f subisomorphic algorithm return two matches: Gal 1 glycan matches Gal 1 motif, Gal 2 matches Gal 2. Gal 1 glycan matches Gal 2 motif, Gal 2 matches Gal 1. However, biological perspective, two matches . function take care , return \"unique\" number matches. details handling monosaccharide, linkages, alignment, substituents, implementation, see has_motif().","code":"Gal 1    \\ b1-? b1-4     GlcNAc -- GlcNAc    / b1-? Gal 2 Gal 1    \\ b1-?     GlcNAc b1-    / b1-? Gal 2"},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/counts_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count How Many Times a Glycan has the Given Motif — counts_motif","text":"","code":"counts_motif(\"Gal(b1-3)Gal(b1-3)GalNAc\", \"Gal(b1-\") #> [1] 2 counts_motif(   \"Man(b1-?)[Man(b1-?)]GalNAc(b1-4)GlcNAc\",   \"Man(b1-?)[Man(b1-?)]GalNAc\" ) #> [1] 1 counts_motif(\"Gal(b1-3)Gal\", \"Man\") #> [1] 0"},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe N-Glycans Properties — describe_n_glycans","title":"Describe N-Glycans Properties — describe_n_glycans","text":"Extract key properties N-glycans, including: \"glycan_type\": N-glycan type: high mannose, hybrid, complex, paucimannose. \"bisecting\": Bisecting GlcNAc presence. \"antennae\": Number antennae. \"core_fuc\": Number core fucoses. \"arm_fuc\": Number arm fucoses. \"terminal_gal\": Number terminal galactoses.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe N-Glycans Properties — describe_n_glycans","text":"","code":"describe_n_glycans(glycans, strict = FALSE, parallel = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe N-Glycans Properties — describe_n_glycans","text":"glycans list glycan_graph objects, character vector IUPAC-condensed structure strings. strict logical value. TRUE, glycan must \"concrete\" monosaccharides (e.g. \"GlcNAc\", \"Man\", \"Gal\") linkage information. FALSE, function lenient, checking monosaacharide identities \"simple\" level (e.g. \"H\", \"N\", \"F\") ignoring linkage information. Default FALSE. preferred cases structural resolution high, known sure glycans indeed N-glycans. parallel logical value. TRUE, function use parallel processing. Remember call future::plan() using argument, otherwise function still use sequential processing.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe N-Glycans Properties — describe_n_glycans","text":"tibble following columns: \"glycan_type\", \"bisecting\", \"antennae\", \"core_fuc\", \"arm_fuc\", \"terminal_gal\". input glycans names, tibble \"glycan\" column. Otherwise, IUPAC condensed strings used, used \"glycan\" column.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Describe N-Glycans Properties — describe_n_glycans","text":"function designed work N-glycans . glycans N-glycans, error thrown.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"strictness","dir":"Reference","previous_headings":"","what":"Strictness","title":"Describe N-Glycans Properties — describe_n_glycans","text":"default (strict = FALSE), function lenient motif checking. checks monosaccharide types \"simple\" level (e.g. \"H\", \"N\", \"F\"), ignores linkage information. preferred cases structural resolution high, e.g. glycoproteomics studies. However, glycans guaranteed N-glycans glycosylation sites. case, make assumptions glycan structures, extract key properties. example, H-N terminal motif considered terminal galactose. high-resolution glycan structures, can set strict = TRUE.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"enabling-parallel-processing","dir":"Reference","previous_headings":"","what":"Enabling parallel processing","title":"Describe N-Glycans Properties — describe_n_glycans","text":"function can spend lot time large datasets (e.g. > 500 glycans). speed , can enable parallel processing setting parallel = TRUE. However, changing argument TRUE set function \"ready\" parallel processing. still need call future::plan() change parallel backend. example, use \"multisession\" backend:","code":"library(future) old_plan <- future::plan(\"multisession\")  # Save the old plan describe_n_glycans(glycans, parallel = TRUE) future::plan(old_plan)  # Restore the old plan"},{"path":"https://glycoverse.github.io/glymotif/reference/describe_n_glycans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe N-Glycans Properties — describe_n_glycans","text":"","code":"library(glyparse) library(purrr)  glycans <- c(   \"(N(F)(N(H(H(N))(H(N(H))))))\",   \"(N(N(H(H)(H(H)(H)))))\",   \"(N(F)(N(H(H(N))(H(N(H(H)))))))\",   \"(N(N(H(N)(H(N(H)(F)))(H(N(H)(F))(N(H)(F))))))\",   \"(N(N(H(H(N(H(A))))(H(N(H(A)))))))\" ) glycans <- map(glycans, parse_pglyco_struc) describe_n_glycans(glycans) #> # A tibble: 5 × 7 #>   glycan_type bisecting n_antennae n_core_fuc n_arm_fuc n_gal n_terminal_gal #>   <chr>       <lgl>          <int>      <int>     <int> <int>          <int> #> 1 complex     FALSE              2          1         0     1              1 #> 2 highmannose FALSE             NA          0         0     0              0 #> 3 complex     FALSE              2          1         0     1              0 #> 4 complex     TRUE               3          0         3     3              3 #> 5 complex     FALSE              2          0         0     2              0"},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Structure Graphs, Alignments, or Aglycons of Known Motifs — get_motif_graph","title":"Get the Structure Graphs, Alignments, or Aglycons of Known Motifs — get_motif_graph","text":"Given character vector motifs names GlycoMotif GlyGen Collection, functions return structure graphs, alignments, aglycons motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Structure Graphs, Alignments, or Aglycons of Known Motifs — get_motif_graph","text":"","code":"get_motif_graph(name)  get_motif_alignment(name)  get_motif_aglycon(name)"},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Structure Graphs, Alignments, or Aglycons of Known Motifs — get_motif_graph","text":"name character vector motif name.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Structure Graphs, Alignments, or Aglycons of Known Motifs — get_motif_graph","text":"get_motif_graph() returns glycan_graph name character scalar, list glycan_graph name character vector. get_motif_alignment() returns character vector motif alignments. get_motif_aglycon() returns character vector motif aglycons. three functions, name length greater 1, return value named motif names.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/get_motif_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Structure Graphs, Alignments, or Aglycons of Known Motifs — get_motif_graph","text":"","code":"get_motif_graph(\"N-Glycan core basic\") #> Glycan Graph #> GlcNAc: 2, Man: 3 #> ------------------ #> GlcNAc (?1-) #> └─GlcNAc (b1-4) #>   └─Man (b1-4) #>     ├─Man (a1-6) #>     └─Man (a1-3) get_motif_alignment(\"N-Glycan core basic\") #> [1] \"core\" get_motif_aglycon(\"N-Glycan core basic\") #> [1] \"Asn\"  get_motif_graph(c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> $`O-Glycan core 1` #> Glycan Graph #> Gal: 1, GalNAc: 1 #> ------------------ #> GalNAc (a1-) #> └─Gal (b1-3) #>  #> $`O-Glycan core 2` #> Glycan Graph #> Gal: 1, GalNAc: 1, GlcNAc: 1 #> ------------------ #> GalNAc (a1-) #> ├─GlcNAc (b1-6) #> └─Gal (b1-3) #>  get_motif_alignment(c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> O-Glycan core 1 O-Glycan core 2  #>          \"core\"          \"core\"  get_motif_aglycon(c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> O-Glycan core 1 O-Glycan core 2  #>       \"Ser/Thr\"       \"Ser/Thr\""},{"path":"https://glycoverse.github.io/glymotif/reference/glymotif-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glymotif: Extract glycan motifs from glycan structures — glymotif-package","title":"glymotif: Extract glycan motifs from glycan structures — glymotif-package","text":"package extracts glycan motifs (substructures) glycan structures. also determine common structural properties N-glycans, e.g. number antennae, number branches, etc.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/glymotif-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glymotif: Extract glycan motifs from glycan structures — glymotif-package","text":"Maintainer: Bin Fu 23110220018@m.fudan.edu.cn (ORCID)","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Glycan has the Given Motif — has_motif","title":"Check if a Glycan has the Given Motif — has_motif","text":"function checks glycan given motif. Technically speaking, performs subgraph isomorphism test determine motif subgraph glycan. Monosaccharides, linkages , substituents considered.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Glycan has the Given Motif — has_motif","text":"","code":"has_motif(glycan, motif, alignment = NULL, ignore_linkages = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Glycan has the Given Motif — has_motif","text":"glycan 'glycan_graph' object, IUPAC-condensed structure string. motif 'glycan_graph' object, IUPAC-condensed structure string, known motif name (use available_motifs() see available motifs). alignment character string. Possible values \"substructure\", \"core\", \"terminal\" \"whole\". provided, value decided based motif argument. motif motif name, alignment database used. Otherwise, \"substructure\" used. ignore_linkages logical value. TRUE, linkages ignored comparison.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Glycan has the Given Motif — has_motif","text":"logical value indicating glycan motif.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"graph-mode-and-monosaccharide-type","dir":"Reference","previous_headings":"","what":"Graph mode and monosaccharide type","title":"Check if a Glycan has the Given Motif — has_motif","text":"glycan motif 'glycan_graph' objects (see glyrepr::as_glycan_graph()). can either \"NE\" \"DN\" glycan graphs (can different). Also, can different monosaccharide types (\"concrete\", \"generic\" \"simple\", see glyrepr::decide_mono_type()). However, monosaccharide type glycan obscurer motif, raise error. example, \"concrete\" glycan can \"generic\" motif, vice versa.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"linkages","dir":"Reference","previous_headings":"","what":"Linkages","title":"Check if a Glycan has the Given Motif — has_motif","text":"Obscure linkages (e.g. \"??-?\") allowed motif graph (see glyrepr::possible_linkages()). \"?\" motif graph means \"anything OK\", match linkage glycan graph. However, \"?\" glycan graph match \"?\" motif graph. can set ignore_linkages = TRUE ignore linkages comparison. examples: \"b1-?\" motif match \"b1-4\" glycan. \"b1-?\" motif match \"b1-?\" glycan. \"b1-4\" motif match \"b1-?\" glycan. \"a1-?\" motif match \"b1-4\" glycan. \"a1-?\" motif match \"?-4\" glycan. motifs glycans can \"half-linkage\" reducing end, e.g. \"GlcNAc(b1-\". half linkage motif matched linkage glycan, half linkage glycan. e.g. Glycan \"GlcNAc(b1-4)Gal(a1-\" \"GlcNAc(b1-\" \"Gal(a1-\" motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"alignment","dir":"Reference","previous_headings":"","what":"Alignment","title":"Check if a Glycan has the Given Motif — has_motif","text":"According GlycoMotif database, motif can classified four alignment types: \"substructure\": motif can anywhere glycan. default. See substructure details. \"core\": motif must align least one connected substructure (subtree) reducing end glycan. See glycan core details. \"terminal\": motif must align least one connected substructure (subtree) nonreducing end glycan. See nonreducing end details. \"whole\": motif must align entire glycan. See whole-glycan details. using known motifs GlycoMotif GlyGen Collection, best practice provide alignment argument, let function decide alignment based motif name. However, still possible override default alignments. case, user-provided alignments used, warning issued.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"substituents","dir":"Reference","previous_headings":"","what":"Substituents","title":"Check if a Glycan has the Given Motif — has_motif","text":"Substituents (e.g. \"Ac\", \"SO3\") matched strict mode. \"Neu5Ac-9Ac\" match \"Neu5Ac-9Ac\" \"Neu5Ac\", \"Neu5Ac\" match \"Neu5Ac-9Ac\". Obscure linkage motif match linkage glycan. e.g. Motif \"Neu5Ac-?Ac\" match \"Neu5Ac-9Ac\" glycan.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Check if a Glycan has the Given Motif — has_motif","text":"hood, function uses igraph::graph.get.subisomorphisms.vf2() get possible subgraph isomorphisms glycan motif. color vertex attributes added graphs distinguish monosaccharides. possible matches, function checks following: Alignment: using alignment_check() Substituents: using substituent_check() Linkages: using linkage_check() Anomer: using anomer_check() function returns TRUE matches pass checks.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/has_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a Glycan has the Given Motif — has_motif","text":"","code":"library(glyparse) library(glyrepr)  (glycan <- o_glycan_core_2(mono_type = \"concrete\")) #> Glycan Graph #> Gal: 1, GalNAc: 1, GlcNAc: 1 #> ------------------ #> GalNAc (a1-) #> ├─Gal (b1-3) #> └─GlcNAc (b1-6)  # The glycan has the motif \"Gal(b1-3)GalNAc\" has_motif(glycan, \"Gal(b1-3)GalNAc\") #> [1] TRUE  # But not \"Gal(b1-4)GalNAc\" (wrong linkage) has_motif(glycan, \"Gal(b1-4)GalNAc\") #> [1] FALSE  # Set `ignore_linkages` to `TRUE` to ignore linkages has_motif(glycan, \"Gal(b1-4)GalNAc\", ignore_linkages = TRUE) #> [1] TRUE  # Different monosaccharide types are allowed has_motif(glycan, \"Hex(b1-3)HexNAc\") #> [1] TRUE  # However, the monosaccharide type of `glycan` cannot be obscurer than that of `motif` glycan_simple <- convert_glycan_mono_type(glycan, \"simple\") try(has_motif(glycan_simple, \"Gal(b1-3)GalNAc\")) #> Error in ensure_glycan_mono_type(glycan, motif) :  #>   The monosaccharide type of `glycan` cannot be obscurer than `motif`. #> ✖ \"simple\" is obscurer than \"concrete\".  # Obscure linkages in the `motif` graph are allowed has_motif(glycan, \"Gal(b1-?)GalNAc\") #> [1] TRUE  # However, obscure linkages in `glycan` will only match \"?\" in the `motif` graph glycan_2 <- parse_iupac_condensed(\"Gal(b1-?)[GlcNAc(b1-6)]GalNAc\") has_motif(glycan_2, \"Gal(b1-3)GalNAc\") #> [1] FALSE has_motif(glycan_2, \"Gal(b1-?)GalNAc\") #> [1] TRUE  # The anomer of the motif will be matched to linkages in the glycan has_motif(glycan_2, \"GlcNAc(b1-\") #> [1] TRUE  # Alignment types # The default type is \"substructure\", which means the motif can be anywhere in the glycan. # Other options include \"core\", \"terminal\" and \"whole\". glycan_3 <- parse_iupac_condensed(\"Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal\") motifs <- c(   \"Gal(a1-3)Gal(a1-4)Gal(a1-6)Gal\",   \"Gal(a1-3)Gal(a1-4)Gal\",            \"Gal(a1-4)Gal(a1-6)Gal\",            \"Gal(a1-4)Gal\" )  purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = \"whole\")) #> [1]  TRUE FALSE FALSE FALSE purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = \"core\")) #> [1]  TRUE FALSE  TRUE FALSE purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = \"terminal\")) #> [1]  TRUE  TRUE FALSE FALSE purrr::map_lgl(motifs, ~ has_motif(glycan_3, .x, alignment = \"substructure\")) #> [1] TRUE TRUE TRUE TRUE  # Substituents glycan_4 <- \"Neu5Ac9Ac(a2-3)Gal(b1-4)GlcNAc\" glycan_5 <- \"Neu5Ac(a2-3)Gal(b1-4)GlcNAc\"  has_motif(glycan_4, glycan_5) #> [1] FALSE has_motif(glycan_5, glycan_4) #> [1] FALSE has_motif(glycan_4, glycan_4) #> [1] TRUE has_motif(glycan_5, glycan_5) #> [1] TRUE"},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized Motif Checking Functions — has_motifs","title":"Vectorized Motif Checking Functions — has_motifs","text":"Vectorized versions has_motif(): has_motifs(): one glycan, many motifs. have_motif(): many glycans, one motif. have_motifs(): many glycans, many motifs. Vectorized versions counts_motif(): counts_motifs(): one glycan, many motifs. count_motif(): many glycans, one motif. count_motifs(): many glycans, many motifs. can told apart English grammar: Functions starting \"\" \"counts\" work one glycan, \"\" \"count\" multiple glycans. Functions ending \"motif\" work one motif, \"motifs\" multiple motifs.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized Motif Checking Functions — has_motifs","text":"","code":"has_motifs(glycan, motifs = NULL, alignments = NULL, ignore_linkages = FALSE)  have_motif(glycans, motif, alignment = NULL, ignore_linkages = FALSE)  have_motifs(   glycans,   motifs = NULL,   alignments = NULL,   ignore_linkages = FALSE,   simplify = FALSE )  counts_motifs(   glycan,   motifs = NULL,   alignments = NULL,   ignore_linkages = FALSE )  count_motif(glycans, motif, alignment = NULL, ignore_linkages = FALSE)  count_motifs(   glycans,   motifs = NULL,   alignments = NULL,   ignore_linkages = FALSE,   simplify = FALSE )"},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized Motif Checking Functions — has_motifs","text":"glycan 'glycan_graph' object, IUPAC-condensed structure string. motifs list 'glycan_graph' objects, character vector IUPAC-condensed structure strings, character vector known motif names. missing, known motifs GlycoMotif GlyGen Collection used. alignments character vector alignment names motifs, either length motifs, single character string. provided motifs known motif names missing (using known motifs), alignments GlycoMotif GlyGen Collection used. ignore_linkages logical value. TRUE, linkages ignored comparison. glycans list 'glycan_graph' objects, character vector IUPAC-condensed structure strings. motif 'glycan_graph' object, IUPAC-condensed structure string, known motif name. alignment single character, one 'substructure', 'core', 'terminal' 'whole'. provided motif known motif name, alignment GlycoMotif GlyGen Collection used. simplify logical value. used have_motifs(). TRUE, drop columns (motifs) FALSE values. Default FALSE.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized Motif Checking Functions — has_motifs","text":"has_motifs(), have_motif(), counts_motifs(), count_motif() return logical vector length input motifs glycans, respectively. have_motifs() count_motifs() return matrix. Rows glycans columns motifs. dimension names determined input arguments. glycans motifs names, preserved result. , glycans motifs character vectors, used names.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"why-not-purrr-","dir":"Reference","previous_headings":"","what":"Why not purrr?","title":"Vectorized Motif Checking Functions — has_motifs","text":"functions performance benefits simply using purrr functions has_motif() counts_motif(). two functions many internal checks conversions, can redundant using purrr. example, passing N motifs has_motifs(), checks conversions performed N + 1 times (N motifs 1 glycan). However, using purrr::map_lgl(motifs, has_motif, glycan) perform checks conversions N + N times. glycan processed repeatedly motif, even thought N - 1 redundant. situation even worse dealing multiple glycans multiple motifs. Using purrr functions perform checks conversions N * M times (N motifs M glycans), using have_motifs() need N + M times. huge save!","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"why-so-many-","dir":"Reference","previous_headings":"","what":"Why so many?","title":"Vectorized Motif Checking Functions — has_motifs","text":"may wonder just make has_motif() counts_motif() vectorized. reason base \"apply\" family functions purrr functions. vectorized functions consistent predictable return types. has_motif() counts_motif() always return scalar. has_motifs(), have_motif(), counts_motifs(), count_motif() always return vector. have_motifs() count_motifs() always return matrix.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"more-about-arguments","dir":"Reference","previous_headings":"","what":"More about arguments","title":"Vectorized Motif Checking Functions — has_motifs","text":"using known motifs GlycoMotif GlyGen Collection, best practice provide alignment arguments, let function decide alignment based motif name. However, still possible override default alignments. case, user-provided alignments used, warning issued. Monosaccharide types must within glycans motifs. However, holistic obscurer monosaccharide type motifs glycans allowed.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glymotif/reference/has_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized Motif Checking Functions — has_motifs","text":"","code":"library(glyparse)  # Check if a glycan has the given motifs using names. # Note that the `motifs` vector will become names of the result vector. glycan <- \"Gal(b1-3)GlcNAc(b1-3)Gal(b1-3)GalNAc(a1-\" has_motifs(glycan, c(\"O-Glycan core 1\", \"O-Glycan core 2\")) #> O-Glycan core 1 O-Glycan core 2  #>            TRUE           FALSE   # Using IUPAC-condensed structure strings. # Note that names of `motifs` are preserved in the result vector. motifs <- c(M1 = \"Gal(b1-3)GalNAc(a1-\", M2 = \"GlcNAc(b1-4)GlcNAc(a1-\") has_motifs(glycan, motifs) #>    M1    M2  #>  TRUE FALSE   # Or using 'glycan_graph' objects. motifs <- list(   M1 = parse_iupac_condensed(\"Gal(b1-3)GalNAc(a1-\"),   M2 = parse_iupac_condensed(\"GlcNAc(b1-4)GlcNAc(a1-\") ) has_motifs(glycan, motifs) #>    M1    M2  #>  TRUE FALSE   # If motifs are missing, use all known motifs in the # GlycoMotif GlyGen Collection. has_motifs(glycan)[1:5] #> Blood group H (type 2) - Lewis y                        i antigen  #>                            FALSE                            FALSE  #>                         LacdiNAc                              GT2  #>                            FALSE                            FALSE  #> Blood group B (type 1) - Lewis b  #>                            FALSE   # Check if a list of glycans have the given motif. glycans <- c(G1 = \"Gal(b1-3)GalNAc(a1-\", G2 = \"GlcNAc(b1-4)GlcNAc(a1-\") have_motif(glycans, \"O-Glycan core 1\") #>    G1    G2  #>  TRUE FALSE   # Check if a list of glycans have the given motifs. glycans <- c(G1 = \"Gal(b1-3)GalNAc(a1-\", G2 = \"GlcNAc(b1-4)GlcNAc(a1-\") motifs <- c(M1 = \"Gal(b1-\", M2 = \"GlcNAc(b1-\") have_motifs(glycans, motifs) #>       M1    M2 #> G1  TRUE FALSE #> G2 FALSE  TRUE"},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Motif is Known — is_known_motif","title":"Check if a Motif is Known — is_known_motif","text":"function checks motifs known motifs GlycoMotif GlyGen Collection.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Motif is Known — is_known_motif","text":"","code":"is_known_motif(name)"},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Motif is Known — is_known_motif","text":"name character vector motif name.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_known_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Motif is Known — is_known_motif","text":"logical vector.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Glycan is an N-Glycan — is_n_glycan","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"function checks glycan N-glycan core motif:","code":"Man    \\     Man - GlcNAc - GlcNAc    / Man"},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"","code":"is_n_glycan(glycan, strict = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"glycan glycan_graph object, character string IUPAC condensed format. strict logical value. TRUE, glycan must \"concrete\" monosaccharides (e.g. \"GlcNAc\", \"Man\", \"Gal\") linkage information. FALSE, function lenient, checking monosaacharide identities \"simple\" level (e.g. \"H\", \"N\", \"F\") ignoring linkage information. Default FALSE. preferred cases structural resolution high, known sure glycans indeed N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/is_n_glycan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Glycan is an N-Glycan — is_n_glycan","text":"logical value.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine N-Glycan Key Properties — n_glycan_type","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"functions check key properties N-glycan: n_glycan_type(): Determine N-glycan type. has_bisecting(): Check glycan bisecting GlcNAc. n_antennae(): Count number antennae. n_core_fuc(): Count number core fucoses. n_arm_fuc(): Count number arm fucoses. n_gal(): Count number galactoses. n_terminal_gal(): Count number terminal galactoses.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"","code":"n_glycan_type(glycan, strict = FALSE)  has_bisecting(glycan, strict = FALSE)  n_antennae(glycan, strict = FALSE)  n_core_fuc(glycan, strict = FALSE)  n_arm_fuc(glycan, strict = FALSE)  n_gal(glycan, strict = FALSE)  n_terminal_gal(glycan, strict = FALSE)"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"glycan glycan_graph object, character string IUPAC condensed format. strict logical value. TRUE, glycan must \"concrete\" monosaccharides (e.g. \"GlcNAc\", \"Man\", \"Gal\") linkage information. FALSE, function lenient, checking monosaacharide identities \"simple\" level (e.g. \"H\", \"N\", \"F\") ignoring linkage information. Default FALSE. preferred cases structural resolution high, known sure glycans indeed N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"n_glycan_type(): character scalar indicating N-glycan type, either \"highmannose\", \"hybrid\", \"complex\", \"paucimannose\". has_bisecting(): logical value indicating glycan bisecting GlcNAc. n_antennae(): integer scalar indicating number antennae. n_core_fuc(): integer scalar indicating number core fucoses. n_arm_fuc(): integer scalar indicating number arm fucoses. n_gal(): integer scalar indicating number galactoses. n_terminal_gal(): integer scalar indicating number terminal galactoses.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-glycan-type-n-glycan-types","dir":"Reference","previous_headings":"","what":"n_glycan_type(): N-Glycan Types","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Four types N-glycans recognized: high mannose, hybrid, complex, paucimannose. information N-glycan types, see Essentials Glycobiology.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"has-bisecting-bisecting-glcnac","dir":"Reference","previous_headings":"","what":"has_bisecting(): Bisecting GlcNAc","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Bisecting GlcNAc GlcNAc residue attached core mannose N-glycans.","code":"Man         \\ GlcNAc - Man - GlcNAc - GlcNAc ~~~~~~  /      Man"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-antennae-number-of-antennae","dir":"Reference","previous_headings":"","what":"n_antennae(): Number of Antennae","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"number antennae number branching GlcNAc core mannoses complex N-glycan. Bisecting GlcNAc counted antenna. functions returns NA_integer_ non-complex N-glycans.","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-core-fuc-number-of-core-fucoses","dir":"Reference","previous_headings":"","what":"n_core_fuc(): Number of Core Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Core fucoses fucose residues attached core GlcNAc N-glycan.","code":"Man             Fuc  <- core fucose    \\             |     Man - GlcNAc - GlcNAc    / Man"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-arm-fuc-number-of-arm-fucoses","dir":"Reference","previous_headings":"","what":"n_arm_fuc(): Number of Arm Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Arm focuses thoses focuse residues attached branching GlcNAc N-glycan.","code":"Fuc  <- arm fucose   | GlcNAc - Man             \\              Man - GlcNAc - GlcNAc             / GlcNAc - Man"},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-gal-number-of-galactoses","dir":"Reference","previous_headings":"","what":"n_gal(): Number of Galactoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"function seems useless silly. , well-structured glycan concrete monosaccharides. However, \"Hex\" \"H\" hand, tricky know many \"Gal\" many \"Man\". function makes simply assumption rightmost \"H\" \"H-H-N-H\" unit galactose. two \"H\" left mannoses N-glycan core. \"N\" GlcNAc attached one core mannose. method used strict = FALSE. strict = TRUE, function authentically check number \"Gal\".","code":""},{"path":"https://glycoverse.github.io/glymotif/reference/n_glycan_type.html","id":"n-terminal-gal-number-of-terminal-galactoses","dir":"Reference","previous_headings":"","what":"n_terminal_gal(): Number of Terminal Galactoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Terminal galactoses galactose residues non-reducing end without sialic acid capping.","code":"Gal - GlcNAc - Man          ~~~               \\      terminal Gal           Man - GlcNAc - GlcNAc                            / Neu5Ac - Gal - GlcNAc - Man          ~~~    not terminal Gal"}]
